taskKey="com.javarush.task.task39.task3913.big03"\n\nПарсер логов (3)

Реализуй интерфейс DateQuery у класса LogParser:
3.1.	Метод getDatesForUserAndEvent() должен возвращать даты, когда определенный
пользователь произвел определенное событие.
3.2.	Метод getDatesWhenSomethingFailed() должен возвращать даты, когда
любое событие не выполнилось (статус FAILED).
3.3.	Метод getDatesWhenErrorHappened() должен возвращать даты, когда
любое событие закончилось ошибкой (статус ERROR).
3.4.	Метод getDateWhenUserLoggedFirstTime() должен возвращать дату, когда
пользователь залогинился впервые за указанный период. Если такой даты в логах нет - null.
3.5.	Метод getDateWhenUserSolvedTask() должен возвращать дату, когда пользователь
впервые попытался решить определенную задачу. Если такой даты в логах нет - null.
3.6.	Метод getDateWhenUserDoneTask() должен возвращать дату, когда пользователь
впервые решил определенную задачу. Если такой даты в логах нет - null.
3.7.	Метод getDatesWhenUserWroteMessage() должен возвращать даты, когда
пользователь написал сообщение.
3.8.	Метод getDatesWhenUserDownloadedPlugin() должен возвращать даты, когда
пользователь скачал плагин.


Требования:
1.	Класс LogParser должен поддерживать интерфейс DateQuery.
2.	Метод getDatesForUserAndEvent(String, Event, Date, Date) должен возвращать множество дат, когда переданный пользователь произвел переданное событие за выбранный период.
3.	Метод getDatesWhenSomethingFailed(Date, Date) должен возвращать множество дат, когда любое событие не выполнилось за выбранный период.
4.	Метод getDatesWhenErrorHappened(Date, Date) должен возвращать множество дат, когда любое событие закончилось ошибкой за выбранный период.
5.	Метод getDateWhenUserLoggedFirstTime(String, Date, Date) должен возвращать дату, когда переданный пользователь впервые залогинился за выбранный период. Если такой даты в логах нет - null.
6.	Метод getDateWhenUserSolvedTask(String, int, Date, Date) должен возвращать дату, когда переданный пользователь впервые попытался решить задачу с номером task за выбранный период. Если такой даты в логах нет - null.
7.	Метод getDateWhenUserDoneTask(String, int, Date, Date) должен возвращать дату, когда переданный пользователь впервые решил задачу с номером task за выбранный период. Если такой даты в логах нет - null.
8.	Метод getDatesWhenUserWroteMessage(String, Date, Date) должен возвращать множество дат, когда переданный пользователь написал сообщение за выбранный период.
9.	Метод getDatesWhenUserDownloadedPlugin(String, Date, Date) должен возвращать множество дат, когда переданный пользователь скачал плагин за выбранный период.


Парсер логов (3)

Реализуй интерфейс UserQuery у класса LogParser:
2.1.	Метод getAllUsers() должен возвращать всех пользователей.
2.2.	Метод getNumberOfUsers() должен возвращать количество уникальных пользователей.
2.3.	Метод getNumberOfUserEvents() должен возвращать количество уникальных событий от определенного пользователя.
2.4.	Метод getUsersForIP() должен возвращать пользователей с определенным IP.
Несколько пользователей могут использовать один и тот же IP.
2.5.	Метод getLoggedUsers() должен возвращать пользователей, которые делали логин.
2.6.	Метод getDownloadedPluginUsers() должен возвращать пользователей, которые скачали плагин.
2.7.	Метод getWroteMessageUsers() должен возвращать пользователей, которые отправили сообщение.
2.8.	Метод getSolvedTaskUsers(Date after, Date before) должен возвращать
пользователей, которые решали любую задачу.
2.9.	Метод getSolvedTaskUsers(Date after, Date before, int task) должен возвращать
пользователей, которые решали задачу с номером task.
2.10.	Метод getDoneTaskUsers(Date after, Date before) должен возвращать
пользователей, которые решили любую задачу.
2.11.	Метод getDoneTaskUsers(Date after, Date before, int task) должен возвращать
пользователей, которые решили задачу с номером task.



Парсер логов (3)

Сегодня мы напишем парсер логов.
Лог файл имеет следующий формат:
ip username date event status
Где:
ip - ip адрес с которого пользователь произвел событие.
user - имя пользователя (одно или несколько слов разделенные пробелами).
date - дата события в формате day.month.year hour:minute:second.
event - одно из событий:
LOGIN - пользователь залогинился,
DOWNLOAD_PLUGIN - пользователь скачал плагин,
WRITE_MESSAGE - пользователь отправил сообщение,
SOLVE_TASK - пользователь попытался решить задачу,
DONE_TASK - пользователь решил задачу.
Для событий SOLVE_TASK и DONE_TASK существует дополнительный параметр,
который указывается через пробел, это номер задачи.
status - статус:
OK - событие выполнилось успешно,
FAILED - событие не выполнилось,
ERROR - произошла ошибка.

Пример строки из лог файла:
&quot;146.34.15.5	Eduard Petrovich Morozko	05.01.2021 20:22:55	DONE_TASK 48	FAILED&quot;.
Записи внутри лог файла не обязательно упорядочены по дате, события могли
произойти и быть записаны в лог в разной последовательности.
Все параметры разделены табуляцией (&quot;\t&quot;)

Класс, который будет отвечать за парсинг логов называется LogParser.
1.1.	Добавь в класс LogParser конструктор с параметром Path logDir, где logDir -
директория с логами (логов может быть несколько, все они должны иметь расширение log).
1.2.	Реализуй интерфейс IPQuery у класса LogParser:
1.2.1.	Метод getNumberOfUniqueIPs(Date after, Date before) должен возвращать
количество уникальных IP адресов за выбранный период. Здесь и далее,
если в методе есть параметры Date after и Date before, то нужно возвратить
данные касающиеся только данного периода (включая даты after и before).
Если параметр after равен null, то нужно обработать все записи, у которых
дата меньше или равна before.
Если параметр before равен null, то нужно обработать все записи, у которых
дата больше или равна after.
Если и after, и before равны null, то нужно обработать абсолютно все записи
(без фильтрации по дате).
1.2.2.	Метод getUniqueIPs() должен возвращать множество, содержащее все
не повторяющиеся IP. Тип в котором будем хранить IP будет String.
1.2.3.	Метод getIPsForUser() должен возвращать IP, с которых работал
переданный пользователь.
1.2.4.	Метод getIPsForEvent() должен возвращать IP, с которых было произведено
переданное событие.
1.2.5.	Метод getIPsForStatus() должен возвращать IP, события с которых
закончилось переданным статусом.

Реализацию метода main() можешь менять по своему усмотрению.



