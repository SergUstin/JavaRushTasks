taskKey="com.javarush.task.task34.task3410.big07"\n\nSokoban (7)

Давай сделаем класс стены Wall. Стена может сталкиваться с другими объектами, но не
может двигаться.
7.1. Добавь класс Wall в пакет model.
7.2. Унаследуй класс от подходящего родителя.
7.3. Реализуй конструктор с параметрами int x и int y.
7.4. Реализуй метод отрисовки.
Подсказка: стену можно нарисовать залитым квадратом коричневого цвета, но тебя
никто не ограничивает в выборе цвета, прояви свою творческую суть по полной.


Требования:
1.	Добавь в пакет model класс Wall.
2.	Класс должен быть унаследован от максимально подходящего базового класса.
3.	Реализуй в созданном классе конструктор, принимающий int x и int y.
4.	Реализуй метод отрисовки стены.


Sokoban (7)

Пришло время создать класс Home. Этот класс будет отвечать за места на игровом поле
(дома) в которые нужно сдвинуть все ящики. Объекты этого типа не должны передвигаться
по полю или сталкиваться с другими игровыми объектами.
6.1. Добавь в пакет model класс Home.
6.2. Класс должен быть унаследован от максимально подходящего базового класса.
6.3. Добавь в созданный класс конструктор, принимающий int x и int y. Высота и ширина
дома должны быть равны 2.
6.4. Реализуй метод отрисовки дома. Подсказка: можешь использовать красный цвет и
прозрачный круг.

Как и с предыдущими игровыми объектами, можешь проверить метод отрисовки в методе
paint() класса Field.



Sokoban (7)

Игровые объекты &ldquo;Ящик&rdquo; и &ldquo;Игрок&rdquo; с одной стороны являются объектами, которые могут
сталкиваться, а с другой они могут перемещаться по полю.
5.1. Создай класс игрока Player и класс ящика Box в пакете model. Каждый из них
унаследуй от максимально подходящего класса.
5.2. Созданные классы должны поддерживать интерфейс, отвечающий за движение
объектов.
5.3. Добавь в созданные классы конструкторы, принимающие int x и int y.
5.4. В каждом из классов, реализуй метод, отвечающий за движение. Он должен смещать
координаты объектов (x и y) на переданные значения.
5.5. В каждом из них, реализуй метод, отвечающий за отрисовку. Этот метод должен:
устанавливать какой-то цвет и рисовать какие-то примитивные фигуры. Проследи,
чтобы центр фигуры имел координаты x и y, а высота и ширина соответствовали
значениям полей height и width.
Подсказка: игрока можешь нарисовать желтым залитым кругом, а ящик &ndash; оранжевым
квадратом с прорисованными диагоналями. Это пример, ты можешь сам выбрать цвет
и вид каждого объекта, ты ограничен только методами доступными для Graphics и
своей фантазией.

Для того чтобы проверить как рисуется твой ящик или игрок, ты можешь создать
объект типа Box или Player в методе paint() класса Field и вызвать у объекта метод
draw(). Сделай это исключительно для проверки методов draw(), в дальнейшем метод
paint() мы реализуем иначе.



Sokoban (7)

Общий класс игровых объектов GameObject уже есть. Пришло время создать классы конкретных типов игровых объектов.
4.1. Часть игровых объектов могут двигаться (игрок и ящики), а часть нет, например, стены и дома.
4.1.1. Добавь интерфейс Movable в пакет model.
4.1.2. Интерфейс Movable должен иметь метод void move(int x, int y).
4.2. Добавь enum Direction в пакет model. Он должен содержать следующие значения:
LEFT, RIGHT, UP и DOWN. Этот тип будет использоваться для описания направления движения объектов.
4.3. Игровые объекты типа &ldquo;дом&rdquo; не поддерживают логики столкновений (игрок или
ящики могут свободно передвигаться по ним). Что касается остальных объектов, то
они не должны проходить сквозь друг друга, они должны сталкиваться. Например,
ящик нельзя протолкнуть сквозь стену.
4.3.1. Добавь абстрактный класс CollisionObject в пакет model.
4.3.2. Класс CollisionObject должен быть унаследован от GameObject.
4.3.3. Добавь в класс CollisionObject:
4.3.3.1. Конструктор, принимающий int x и int y.
4.3.3.2. Публичный метод boolean isCollision(GameObject gameObject, Direction direction).
Этот метод должен возвращаться true, если при перемещении текущего
объекта в направлении direction на FIELD_CELL_SIZE произойдет
столкновение с объектом gameObject, переданным в качестве параметра.
Иначе &ndash; возвращать false. Столкновением считать совпадение координат x и y.



Sokoban (7)

Скоро мы займемся созданием различных игровых объектов. Было бы удобно иметь
возможность сразу их где-то нарисовать и посмотреть, как они выглядят. Объекты будут
рисоваться на игровом поле Field.
Тебе пришел измененный код класса View, который создает объект поля Field и
настраивает правильным образом представление View. А тебе нужно:
3.1. Добавь в пакет view класс Field, унаследованный от JPanel.
3.2. Добавь в класс Field:
3.2.1. Конструктор с параметром View view.
3.2.2. Поле View view, которое должно инициализироваться в конструкторе.
3.2.3. Создай заглушку для метода paint(Graphics g), она пока ничего не будет делать.
3.3. Добавь в конструктор класса контроллера вызов метода init() представления.
3.4. Метод main() в классе Controller должен создавать новый объект контроллера.



Sokoban (7)

Основа заложена, теперь перейдем к ее наполнению. Игровой процесс можно представить
как взаимодействие игровых объектов GameObject. У нас их будет несколько видов: ящик
Box, дом Home (место куда нужно поместить ящик), стена Wall и игрок Player.
2.1. Добавь абстрактный класс GameObject в пакет model.
2.2. Добавь в класс GameObject поля: int x, int y, int width и int height. Это будет позиция и
размер объекта для отрисовки.
2.3. Добавь сеттеры и геттеры для полей класса.
2.4. Добавь в класс Model публичную статическую константу int FIELD_CELL_SIZE = 20, это
будет размер ячейки игрового поля. Все игровые объекты будут занимать одну ячейку
игрового поля. Именно этот размер будет участвовать в расчёте движения и
столкновений объектов. Размер, который будет храниться внутри объекта, будет
использоваться только при его отрисовке.
2.5. Добавь в класс GameObject два конструктора:
2.5.1. GameObject(int x, int y)
2.5.2. GameObject(int x, int y, int width, int height)
Конструкторы должны инициализировать все поля класса. Если width и height не переданы,
используй FIELD_CELL_SIZE в качестве ширины и высоты.
2.6. Добавь абстрактный метод void draw(Graphics graphics) в класс GameObject. Этот метод
будет реализован в каждом типе игровых объектов по-своему. Другими словами,
каждый тип игровых объектов будет знать, как он должен рисоваться и будет сам себя
рисовать в графический контекст graphics. Graphics &ndash; это абстрактный класс из
библиотеки java.awt.



