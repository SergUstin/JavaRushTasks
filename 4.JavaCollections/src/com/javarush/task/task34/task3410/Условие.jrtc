taskKey="com.javarush.task.task34.task3410.big11"\n\nSokoban (11)

Начнем наполнять функционалом класс модели Model. Добавь в него:
11.1. Поле GameObjects gameObjects. Оно будет хранить наши игровые объекты.
11.2. Поле отвечающее за текущий уровень int currentLevel. Проинициализируй его значением 1.
11.3. Поле отвечающие за загрузчик уровней LevelLoader levelLoader.
Проинициализируй его с помощью файла levels.txt из папки res.
11.4. Метод GameObjects getGameObjects(), он должен возвращать все игровые объекты.
11.5. Метод restartLevel(int level), он должен получать новые игровые объекты для
указанного уровня у загрузчика уровня levelLoader и сохранять их в поле gameObjects.
11.6. Метод restart(), он должен перезапускать текущий уровень, вызывая restartLevel с нужным параметром.
11.7. Метод startNextLevel(), он должен увеличивать значение переменной
currentLevel, хранящей номер текущего уровня и выполнять перезапуск нового уровня.


Требования:
1.	Добавь в класс Model поле GameObjects gameObjects.
2.	Добавь в класс Model поле int currentLevel. Проинициализируй его значением 1.
3.	Добавь в класс Model поле LevelLoader levelLoader. Проинициализируй его.
4.	Реализуй в классе Model метод GameObjects getGameObjects().
5.	Реализуй в классе Model метод restartLevel(int level).
6.	Реализуй в классе Model метод restart().
7.	Реализуй в классе Model метод startNextLevel().


Sokoban (11)

В игре будет несколько уровней, все уровни будут храниться в текстовом файле. Сейчас мы
напишем тестовую реализацию загрузчика уровней LevelLoader. Почему тестовую? Полный
функционал нам пока не нужен, он довольно сложный, оставим его на потом. А пока:
10.1. Создай класс LevelLoader в пакете model.
10.2. Добавь в класс конструктор, принимающий Path levels. Параметр levels &ndash; это
путь к тестовому файлу, содержащему описание уровней.
10.3. Добавь в класс LevelLoader метод GameObjects getLevel(int level). Пока не важно,
что будет возвращать этот метод. Пусть он всегда возвращает набор из: одного игрока,
одного дома, одного ящика и нескольких стен. Так будет проще отладить работу игры.
Координаты каждого объекта должны быть не нулевыми и кратными половине
FIELD_CELL_SIZE (центр каждого объекта должен быть в середине ячейки поля).



Sokoban (11)

В процессе работы игры, будут возникать различные события. Давай создадим интерфейс
слушателя событий EventListener. Его должен реализовывать каждый класс, который хочет
обрабатывать события. А классы, которые будут генерировать события, будут вызывать
методы этого интерфейса.
9.1. Добавь интерфейс EventListener в пакет controller.
9.2. Добавь в интерфейс void методы:
9.2.1. move(Direction direction) &ndash; передвинуть объект в определенном направлении.
9.2.2. restart() &ndash; начать заново текущий уровень.
9.2.3. startNextLevel() &ndash; начать следующий уровень.
9.2.4. levelCompleted(int level) &ndash; уровень с номером level завершён.
9.3. Добавь классу Controller интерфейс EventListener, напиши необходимые заглушки-
реализации интерфейса.
9.4. Добавь в классы Model и Field по полю EventListener eventListener.
9.5. Добавь в классы Model, View и Field по методу setEventListener(EventListener
eventListener). Этот метод в классе View должен вызвать аналогичный метод у объекта
field, а в классах Model и Field устанавливать значение внутренних полей eventListener.



Sokoban (11)

Ты создал полную коллекцию типов игровых объектов. Давай создадим класс, который будет хранить эти объекты.
8.1. Создай класс GameObjects в пакте model.
8.2. Добавь в него:
8.2.1. Поля Set&lt;Wall&gt; walls, Set&lt;Box&gt; boxes, Set&lt;Home&gt; homes и Player player.
8.2.2. Геттеры для этих полей.
8.2.3. Конструктор класса, принимающий Set&lt;Wall&gt; walls, Set &lt;Box&gt; boxes, Set&lt;Home&gt; homes,
Player player и инициализирующий поля класса.
8.2.4. Метод Set&lt;GameObject&gt; getAll(). Он должен возвращать множество, содержащее
все объекты, хранящиеся внутри класса.



Sokoban (11)

Давай сделаем класс стены Wall. Стена может сталкиваться с другими объектами, но не
может двигаться.
7.1. Добавь класс Wall в пакет model.
7.2. Унаследуй класс от подходящего родителя.
7.3. Реализуй конструктор с параметрами int x и int y.
7.4. Реализуй метод отрисовки.
Подсказка: стену можно нарисовать залитым квадратом коричневого цвета, но тебя
никто не ограничивает в выборе цвета, прояви свою творческую суть по полной.



Sokoban (11)

Пришло время создать класс Home. Этот класс будет отвечать за места на игровом поле
(дома) в которые нужно сдвинуть все ящики. Объекты этого типа не должны передвигаться
по полю или сталкиваться с другими игровыми объектами.
6.1. Добавь в пакет model класс Home.
6.2. Класс должен быть унаследован от максимально подходящего базового класса.
6.3. Добавь в созданный класс конструктор, принимающий int x и int y. Высота и ширина
дома должны быть равны 2.
6.4. Реализуй метод отрисовки дома. Подсказка: можешь использовать красный цвет и
прозрачный круг.

Как и с предыдущими игровыми объектами, можешь проверить метод отрисовки в методе
paint() класса Field.



