taskKey="com.javarush.task.task28.task2810.big10"\n\nAggregator (10)

У View есть метод update, в него передается список вакансий для отображения.
Очевидно, что этот метод будет вызываться моделью, т.к. только она получает данные.
Пришло время создать модель.

1. Создай класс Model в пакете model.

2. Добавь два приватных поля - 1) вью, 2) массив провайдеров.

3. Создай конструктор с двумя параметрами - 1) вью, 2) массив провайдеров (аргумент переменной длинны - varargs).
На неправильные данные кинь IllegalArgumentException.

4. Создай публичный метод void selectCity(String city).

5. Реализуй логику метода selectCity:
5.1. получить вакансии с каждого провайдера,
5.2. обновить вью списком вакансий из п.5.1.


Требования:
1.	Создай класс Model в пакете model.
2.	В классе Model добавь два приватных поля: вью и массив провайдеров.
3.	Создай конструктор с двумя параметрами: вью и массив провайдеров (аргумент переменной длинны - varargs). На неправильные данные кинь IllegalArgumentException.
4.	В класс Model добавь метод public void selectCity(String city).
5.	Реализуй логику метода selectCity(String). Он должен получать вакансии с каждого провайдера и передавать их все в метод update у вью.


Aggregator (10)

Пришло время чуток порефакторить код.
Почитай в инете про паттерн MVC(Model-View-Controller).
Кратко - используя View(вид) пользователь генерирует события, которые обрабатывает контроллер.
Контроллер принимает решение, какие данные ему нужны, и обращается к нужной модели.
Модель получает данные, например, из БД или из URL-а. Потом модель передает данные во View.
View отображает данные.

1. Создай пакет view, в котором создай интерфейс View с двумя методами:
void update(List&lt;Vacancy&gt; vacancies);
void setController(Controller controller);

2. В пакете view создай класс HtmlView, реализующий интерфейс View.

3. В классе HtmlView создай приватное поле controller типа Controller, используй его для реализации одного из методов интерфейса.



Aggregator (10)

Запусти снова программу в дебаг моде.
Скопируй полученное значение document.html() в созданный ранее html файл.
Отформатируй его и найди теги с вакансиями.

Почитай в Сообществе дополнительный материал к лекции про селекторы атрибута.

ВНИМАНИЕ: ОСОБЕННОСТИ ТЕСТИРОВАНИЯ!
HTML код странички ХэдХантера может меняться, чтобы эта задача продолжила работать стабильно не меняя тесты
воспользуйся закешированной версией https://javarush.com/testdata/big28data.html
Это только для этого пункта, в следующих заданиях используй реальные страницы.

1. В классе HHStrategy создай protected метод Document getDocument(String searchString, int page) throws IOException.

2. Реализуй следующую логику метода getVacancies в классе HHStrategy:
2.1. Подключись к закешированной страничке ХэдХантера используя метод getDocument, нумерация начинается с 0.
2.2. Получи список элементов с атрибутом по имени &quot;data-qa&quot; и значением &quot;vacancy-serp__vacancy&quot;. Должно быть до 20 вакансий на странице.
2.3. Если данные в списке из п.2.2 есть, то для каждого элемента:
2.3.1. создать вакансию и заполнить все ее данные, получив данные из текущего элемента.
Если тег с зарплатой присутствует, то заполнить и поле salary, иначе инициализировать поле пустой строкой.
site и url нужно взять из атрибута со значением &quot;vacancy-serp__vacancy-title&quot;.
2.4. Выполнить п.2.1-2.3 для следующей страницы ХэдХантера.
2.5. Если закончились страницы с вакансиями, то выйти из цикла.

Исключения игнорировать.
Все вакансии добавить в общий список и вернуть в качестве результата метода.

Подсказка по зарплате:
Поиграйся с URL_FORMAT, добавь туда еще один параметр, чтобы получить вакансии с зарплатами.
Проанализируй полученный html и найди тег для зарплаты.
Не забудь потом вернуть значение URL_FORMAT обратно.



Aggregator (10)

Чтобы сайт поиска работы знал, кто к нему коннектится, проставим Request Headers в наш запрос.

Для разработчиков созданы инструменты, которые показывают различную информацию про запросы.
Я расскажу тебе про два инструмента.

***Chrome****
1. В браузере Хром пойди в Меню - Инструменты - Инструменты разработчика, или нажми Ctrl+Shift+I
2. В браузерной строке набери URL https://grc.ua/search/vacancy?text=java+Kiev или https://hh.ru/search/vacancy?text=java+Kiev
3. Перейди на табу Network(Сеть), запрашиваемый URL должен быть в самом верху.
У него метод отправки данных GET (еще есть POST), статус 200(успешно)
4. Выбери его, откроется информация о страничке.
5. Найди Request Headers(Заголовки запроса)

***FireFox***
1. В браузере FireFox пойди в Меню - Веб-разработка - Инструменты разработчика, или нажми Ctrl+Shift+I
2. В браузерной строке набери URL https://grc.ua/search/vacancy?text=java+Kiev или https://hh.ru/search/vacancy?text=java+Kiev
3. Перейди на табу Network(Сеть), запрашиваемый URL должен быть в самом верху.
4. Выбери его, откроется информация о страничке.
5. Найди Request Headers(Заголовки запроса)

Добавь в коннекшен к урлу сайта поиска работы userAgent и referrer.



Aggregator (10)

1. В папке куда ты скачал либу org.jsoup:jsoup:1.9.2 из maven репозитория, найди jar-архив jsoup-1.9.2.jar или jsoup-1.9.2-sources.jar.
В нем найди пакет examples, посмотри классы в этом пакете.

2. По аналогии с реализацией в примерах кода jsoup - реализуй коннекшен к урлу сайта поиска работы методом GET.
Это нужно сделать в методе getVacancies класса HHStrategy.
Подсказка: получится объект класса Document.

3. Поставь брекпоинт сразу после коннекшена. Запусти программу в дебаг моде.
Скопируй полученное значение document.html() в буфер.

4. Создай файл с расширением html где-то в корне проекта.
Вставь содержимое буфера в этот файл и отформатируй его Ctrl+Alt+L, IDEA умеет форматировать HTML.
Ура! Это код страницы HTML :)

5. Реализуй в вакансии (Vacancy) методы equals/hashCode.
Alt+Insert - equals() and hashCode().



Aggregator (10)

1. Добавь в интерфейс Strategy метод getVacancies(String searchString), который будет возвращать список вакансий.

2. Поправь ошибки в классе HHStrategy.

3. Вернись в метод getJavaVacancies класса Provider, реализуй его логику из расчета, что всех данных хватает.

4. Давай попробуем запустить и посмотреть, как работает наша программа.
В методе main вместо вывода на экран напиши controller.scan();
Воспользуйся подсказкой IDEA и создай метод.
Внутри метода пройдись по всем провайдерам и собери с них все вакансии, добавь их в список. Выведи количество вакансий в консоль.

5. Исправь NPE, если появляется это исключение (поставь заглушку, например Collections.emptyList()).



