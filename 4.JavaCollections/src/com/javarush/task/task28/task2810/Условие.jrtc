taskKey="com.javarush.task.task28.task2810.big17"\n\nAggregator (17)

Что можешь сделать самостоятельно (тестов на этот пункт нет):
1. добавить еще 100500 других сайтов для агрегирования вакансий.
Нужно всего лишь создать стратегию, а потом добавить в модель провайдер с этой стратегией.
2. отсортировать все вакансии, например, по дате создания (придется распарсить дату в полученном html).
3. создать свою вью, например, на свинге. Подменить в main HtmlView на SwingView.
Подключать либы ты уже умеешь. Сделать, чтоб запрос приходил с swing-формы.
4. собрать приложение в war-ник, развернуть Томкат, задеплоить приложение туда. Сделать, чтоб запрос приходил с браузера.


Твои достижения:
1. разобрался с паттерном Strategy,
2. разобрался с самым популярным паттерном MVC (его очень часто спрашивают на собеседовании),
3. научился парсить HTML,
4. получил опыт работы с библиотекой Jsoup,
5. научился подключать внешние либы в IDEA,
6. получил опыт работы с внешними библиотеками,
7. написал крутую архитектуру,
8. стал больше знать и уметь,
9. увидел, как раскладывать задачу на подзадачи,
10. продвинулся на шаг ближе к работе джава программистом.

Поздравляю! Я горжусь тобой!
Ты мой идеальный ученик!


Требования:
1.	Поздравляю! Агрегатор вакансий готов.


Aggregator (17)

Ты молодец, большая работа позади! Теперь тебе легко будет мониторить вакансии для трудоустройства :)
Сейчас Aggregator использует только одну стратегию сбора вакансий - с ХэдХантера.

1. По аналогии с HHStrategy добавь стратегию для Хабр Карьеры.
Назови класс HabrCareerStrategy, реализуй метод getVacancies().

Вот тебе пример ссылки:
https://career.habr.com/vacancies?q=java+Dnepropetrovsk

Пример ссылки на вакансию:
https://career.habr.com/vacancies/1000061222

2. В методе main создай провайдер для HabrCareerStrategy. Передай этот провайдер в конструктор Model.
Это удобно сделать, т.к. модель принимает много провайдеров.
Остальную логику менять не нужно. Видишь, как легко расширять функционал?
От правильной архитектуры зависит многое.

ВНИМАНИЕ: ОСОБЕННОСТИ ТЕСТИРОВАНИЯ!
HTML код странички c вакансиями с Хабр Карьеры, как и ХэдХантера, может меняться. Чтобы эта задача прошла тестирование,
при реализации задания воспользуйся закешированной версией страницы: https://javarush.com/testdata/big28data2.html
Это необходимо для тестирования данного задания, после его сдачи проверь работу HabrCareerStrategy на реальном сайте.



Aggregator (17)

В классе HtmlView остался один пустой метод getUpdatedFileContent(). В этом задании я опишу, что он должен делать.

1. В HtmlView создай protected метод Document getDocument() throws IOException, в котором
распарси файл vacancies.html используя Jsoup. Кодировка файла &quot;UTF-8&quot;, используй поле filePath.

2. В методе getUpdatedFileContent() получи элементы, у которых есть класс &quot;template&quot;.
Сделай копию этого объекта, удали из нее атрибут &quot;style&quot; и класс &quot;template&quot;.
Получи первый элемент и используй его в качестве шаблона для добавления новой строки в таблицу вакансий.

3. Удали все добавленные ранее вакансии. У них единственный класс &quot;vacancy&quot;.
В файле backup.html это одна вакансия - Junior Java Developer.
Нужно удалить все теги tr, у которых class=&quot;vacancy&quot;.
Но тег tr, у которого class=&quot;vacancy template&quot;, не удаляй.
Используй метод remove.

4. В цикле для каждой вакансии полученной как параметр метода:
4.1. склонируй шаблон тега, полученного в п.2. Метод clone.
4.2. получи элемент, у которого есть класс &quot;city&quot;. Запиши в него название города из вакансии.
4.3. получи элемент, у которого есть класс &quot;companyName&quot;. Запиши в него название компании из вакансии.
4.4. получи элемент, у которого есть класс &quot;salary&quot;. Запиши в него зарплату из вакансии.
4.5. получи элемент-ссылку с тегом a. Запиши в него название вакансии(title). Установи реальную ссылку на вакансию вместо href=&quot;url&quot;.
4.6. добавь outerHtml элемента, в который ты записывал данные вакансии,
непосредственно перед шаблоном &lt;tr class=&quot;vacancy template&quot; style=&quot;display: none&quot;&gt;

5. Верни html код всего документа в качестве результата работы метода.

6. В случае возникновения исключения, выведи его стек-трейс и верни строку &quot;Some exception occurred&quot;.

7. Запусти приложение, убедись, что все вакансии пишутся в файл vacancies.html.



Aggregator (17)

В классе HtmlView остались два пустых метода.
В этом задании я опишу, что должен делать метод updateFile. А также расскажу, как можно дебажить.

Он принимает тело файла в виде строки. Нужно его записать в файл, который находится по пути filePath.
Ты это хорошо умеешь делать, поэтому подробностей тут не будет.

Теперь - как дебажить.
Поставь breakpoint, запусти в дебаг моде.
нажми Alt+F8 (Run -&gt; Evaluate Expression).
В выражении (верхняя строка) напиши System.out.println(&quot;AAA&quot;) и нажми Alt+V (снизу кнопка Evaluate).
Перейди в окно консоли, там вывелось &quot;AAA&quot;.

Используя это окно ты можешь смотреть текущие данные, заменять их на другие, нужные тебе.
Можешь выполнять все, что хочешь. Например, удалить все элементы мапы, изменить значение любой переменной,
присвоить новое значение либо обнулить ее.
Поставь брекпоинт в Controller.onCitySelect, запусти в дебаг моде.
Остановились на этом брекпоинте? Отлично, жми Alt+F8, сверху в строке cityName = &quot;junior&quot;;
далее жми Alt+V и F9, чтобы продолжить работу приложения.
Список вакансий, который пришел в HtmlView.update, выполнялся для запроса &quot;java junior&quot;.
Используй окно Expression Evaluation, думаю, оно тебе понадобится в следующем пункте.



Aggregator (17)

Смотри, в пакете view появились два новых файла:
vacancies.html - будешь в него записывать данные,
backup.html - дубликат vacancies.html для восстановления, вдруг данные в vacancies.html сотрутся.

Стань слева в дереве проекта на vacancies.html, нажми правой клавишей мыши, далее &quot;Open in Browser&quot;.
Так будешь смотреть результат своего парсинга.

Пора заняться отображением вакансий.
1. В методе update класса HtmlView реализуй следующую логику:
1.1. сформируй новое тело файла vacancies.html, которое будет содержать вакансии,
1.2. запиши в файл vacancies.html его обновленное тело,
1.3. Все исключения должны обрабатываться в этом методе - выведи стек-трейс, если возникнет исключение.

2. Для реализации п.1 создай два пустых private метода:
String getUpdatedFileContent(List&lt;Vacancy&gt;), void updateFile(String),
Реализовывать их логику будем в следующих заданиях.

3. Чтобы добраться до файла vacancies.html, сформируй относительный путь к нему.
В классе HtmlView создай приватное строковое final поле filePath, присвой ему относительный путь к vacancies.html.
Путь должен быть относительно корня проекта.
Формируй путь динамически используя this.getClass().getPackage() и разделитель &quot;/&quot;.
Подсказка: путь должен начинаться с &quot;./4.JavaCollections/src/&quot;.



Aggregator (17)

Чтобы запустить приложение, нужно эмулировать событие пользователя:
1. В классе HtmlView создай публичный метод void userCitySelectEmulationMethod().
Пусть этот метод пробросит вызов в контроллер для города &quot;Odessa&quot;.

2. Чтобы понять, что все работает, выведи что-то в консоль в методе update в HtmlView, например, количество вакансий.
Это будет флаг, что можно двигаться дальше.

3. Для запуска нужно еще обновить метод main в Aggregator.
3.1. Создай вью, модель, контроллер. Переменная для вью должна быть типа HtmlView. Модели нужен минимум один провайдер.
3.2. Засэть во вью контроллер.
3.3. Вызови у вью метод  userCitySelectEmulationMethod.

4. Запускай приложение! Подожди несколько секунд, чтобы выгреблись данные.
Работает? Отлично, что работает!



