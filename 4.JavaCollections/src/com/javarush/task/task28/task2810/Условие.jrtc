taskKey="com.javarush.task.task28.task2810.big13"\n\nAggregator (13)

Смотри, в пакете view появились два новых файла:
vacancies.html - будешь в него записывать данные,
backup.html - дубликат vacancies.html для восстановления, вдруг данные в vacancies.html сотрутся.

Стань слева в дереве проекта на vacancies.html, нажми правой клавишей мыши, далее &quot;Open in Browser&quot;.
Так будешь смотреть результат своего парсинга.

Пора заняться отображением вакансий.
1. В методе update класса HtmlView реализуй следующую логику:
1.1. сформируй новое тело файла vacancies.html, которое будет содержать вакансии,
1.2. запиши в файл vacancies.html его обновленное тело,
1.3. Все исключения должны обрабатываться в этом методе - выведи стек-трейс, если возникнет исключение.

2. Для реализации п.1 создай два пустых private метода:
String getUpdatedFileContent(List&lt;Vacancy&gt;), void updateFile(String),
Реализовывать их логику будем в следующих заданиях.

3. Чтобы добраться до файла vacancies.html, сформируй относительный путь к нему.
В классе HtmlView создай приватное строковое final поле filePath, присвой ему относительный путь к vacancies.html.
Путь должен быть относительно корня проекта.
Формируй путь динамически используя this.getClass().getPackage() и разделитель &quot;/&quot;.
Подсказка: путь должен начинаться с &quot;./4.JavaCollections/src/&quot;.


Требования:
1.	В классе HtmlView создай пустой приватный метод String getUpdatedFileContent(List&lt;Vacancy&gt;).
2.	В классе HtmlView создай пустой приватный метод void updateFile(String).
3.	С помощью созданных методов реализуй логику update согласно заданию.
4.	В классе HtmlView создай приватное строковое final поле filePath и присвой ему относительный путь к vacancies.html.


Aggregator (13)

Чтобы запустить приложение, нужно эмулировать событие пользователя:
1. В классе HtmlView создай публичный метод void userCitySelectEmulationMethod().
Пусть этот метод пробросит вызов в контроллер для города &quot;Odessa&quot;.

2. Чтобы понять, что все работает, выведи что-то в консоль в методе update в HtmlView, например, количество вакансий.
Это будет флаг, что можно двигаться дальше.

3. Для запуска нужно еще обновить метод main в Aggregator.
3.1. Создай вью, модель, контроллер. Переменная для вью должна быть типа HtmlView. Модели нужен минимум один провайдер.
3.2. Засэть во вью контроллер.
3.3. Вызови у вью метод  userCitySelectEmulationMethod.

4. Запускай приложение! Подожди несколько секунд, чтобы выгреблись данные.
Работает? Отлично, что работает!



Aggregator (13)

В Model есть метод selectCity, в него передается название города, для которого выбираются вакансии.
Очевидно, что этот метод будет вызываться контроллером, т.к. он принимает решение, какую модель использовать.

1. Добавь в Controller новое приватное поле Model model.

2. Удали метод scan() из Controller, его логика переместилась в модель.

3. Удали конструктор, toString и поле providers из контроллера.

4. Создай конструктор в Controller с аргументом Model.
На некорректные данные брось IllegalArgumentException

5. В Controller создай публичный метод void onCitySelect(String cityName), в котором вызови нужный метод модели.

6. Удали код из метода main. Этот код уже не валидный.



Aggregator (13)

У View есть метод update, в него передается список вакансий для отображения.
Очевидно, что этот метод будет вызываться моделью, т.к. только она получает данные.
Пришло время создать модель.

1. Создай класс Model в пакете model.

2. Добавь два приватных поля - 1) вью, 2) массив провайдеров.

3. Создай конструктор с двумя параметрами - 1) вью, 2) массив провайдеров (аргумент переменной длинны - varargs).
На неправильные данные кинь IllegalArgumentException.

4. Создай публичный метод void selectCity(String city).

5. Реализуй логику метода selectCity:
5.1. получить вакансии с каждого провайдера,
5.2. обновить вью списком вакансий из п.5.1.



Aggregator (13)

Пришло время чуток порефакторить код.
Почитай в инете про паттерн MVC(Model-View-Controller).
Кратко - используя View(вид) пользователь генерирует события, которые обрабатывает контроллер.
Контроллер принимает решение, какие данные ему нужны, и обращается к нужной модели.
Модель получает данные, например, из БД или из URL-а. Потом модель передает данные во View.
View отображает данные.

1. Создай пакет view, в котором создай интерфейс View с двумя методами:
void update(List&lt;Vacancy&gt; vacancies);
void setController(Controller controller);

2. В пакете view создай класс HtmlView, реализующий интерфейс View.

3. В классе HtmlView создай приватное поле controller типа Controller, используй его для реализации одного из методов интерфейса.



Aggregator (13)

Запусти снова программу в дебаг моде.
Скопируй полученное значение document.html() в созданный ранее html файл.
Отформатируй его и найди теги с вакансиями.

Почитай в Сообществе дополнительный материал к лекции про селекторы атрибута.

ВНИМАНИЕ: ОСОБЕННОСТИ ТЕСТИРОВАНИЯ!
HTML код странички ХэдХантера может меняться, чтобы эта задача продолжила работать стабильно не меняя тесты
воспользуйся закешированной версией https://javarush.com/testdata/big28data.html
Это только для этого пункта, в следующих заданиях используй реальные страницы.

1. В классе HHStrategy создай protected метод Document getDocument(String searchString, int page) throws IOException.

2. Реализуй следующую логику метода getVacancies в классе HHStrategy:
2.1. Подключись к закешированной страничке ХэдХантера используя метод getDocument, нумерация начинается с 0.
2.2. Получи список элементов с атрибутом по имени &quot;data-qa&quot; и значением &quot;vacancy-serp__vacancy&quot;. Должно быть до 20 вакансий на странице.
2.3. Если данные в списке из п.2.2 есть, то для каждого элемента:
2.3.1. создать вакансию и заполнить все ее данные, получив данные из текущего элемента.
Если тег с зарплатой присутствует, то заполнить и поле salary, иначе инициализировать поле пустой строкой.
site и url нужно взять из атрибута со значением &quot;vacancy-serp__vacancy-title&quot;.
2.4. Выполнить п.2.1-2.3 для следующей страницы ХэдХантера.
2.5. Если закончились страницы с вакансиями, то выйти из цикла.

Исключения игнорировать.
Все вакансии добавить в общий список и вернуть в качестве результата метода.

Подсказка по зарплате:
Поиграйся с URL_FORMAT, добавь туда еще один параметр, чтобы получить вакансии с зарплатами.
Проанализируй полученный html и найди тег для зарплаты.
Не забудь потом вернуть значение URL_FORMAT обратно.



