taskKey="com.javarush.task.task33.task3310.big12"\n\nShortener (12)

Задача, когда требуется создать Map, работающий в две стороны (по ключу получать
значение, а по значению ключ) не такая уж и редкая. Такие коллекции уже
реализованы в различных сторонних библиотеках коллекций. Одна из таких Guava от
Google.
12.1.	Скачай и подключи библиотеку guava версии 19.0.
12.2.	Реализуй стратегию HashBiMapStorageStrategy. Она должна:
12.2.1.	Поддерживать интерфейс StorageStrategy.
12.2.2.	Внутри иметь только одно поле data типа HashBiMap.
12.3.	Проверь новую стратегию в методе main(). Запусти программу и сравни
скорость работы пяти стратегий.


Требования:
1.	Класс HashBiMapStorageStrategy должен поддерживать интерфейс StorageStrategy.
2.	В классе HashBiMapStorageStrategy должно быть создано только одно поле data типа HashBiMap.
3.	Метод containsKey должен проверять содержится ли ключ в data.
4.	Метод containsValue должен проверять содержится ли значение в data.
5.	Метод put должен добавлять пару (key, value) в data.
6.	Метод getValue должен возвращать значение полученное из data.
7.	Метод getKey должен возвращать значение полученное из data.inverse().


Shortener (12)

Как ты заметил, получение идентификатора для строки требует намного больше
времени, чем получение строки по идентификатору. Это ожидаемо и следует из
реализации HashMap. Давай напишем четвертую стратегию
OurHashBiMapStorageStrategy, которая будет лишена этого недостатка.
11.1.	Создай класс OurHashBiMapStorageStrategy, реализующий интерфейс
StorageStrategy.
11.2.	Добавь в него два поля HashMap&lt;Long, String&gt; k2v и HashMap&lt;String, Long&gt; v2k.
Первое будет хранить соответствие ключа и значения, а второе наоборот: значения
и ключа.
11.3.	Реализуй методы интерфейса StorageStrategy, обеспечив максимальную
скорость. Подсказка: при добавлении новой пары ключ-значение необходимо
добавлять ее сразу в два поля.
Проверь новую стратегию в методе main(). Запусти программу и сравни скорость работы
всех 4х стратегий. Убедись, что мы значительно увеличили скорость получения
идентификатора. Но как ты понимаешь, у этого решения есть не только плюсы, но и минусы.
Подумай в каких случаях имеет смысл использовать OurHashBiMapStorageStrategy, а в каких
HashMapStorageStrategy.



Shortener (12)

Создай и реализуй класс FileStorageStrategy. Он должен:
10.1.	Реализовывать интерфейс StorageStrategy.
10.2.	Использовать FileBucket в качестве ведер (англ. bucket). Подсказка: класс
должен содержать поле FileBucket[] table.
10.3.	Работать аналогично тому, как это делает OurHashMapStorageStrategy, но
удваивать количество ведер не когда количество элементов size станет больше
какого-то порога, а когда размер одного из ведер (файлов) стал больше
bucketSizeLimit.
10.3.1.	Добавь в класс поле long bucketSizeLimit.
10.3.2.	Проинициализируй его значением по умолчанию, например, 10000 байт.
10.3.3.	Добавь сеттер и геттер для этого поля.
10.4.	При реализации метода resize(int newCapacity) проследи, чтобы уже не нужные
файлы были удалены (вызови метод  remove()).
Проверь новую стратегию в методе main(). Учти, что стратегия FileStorageStrategy гораздо
более медленная, чем остальные. Не используй большое количество элементов для теста,
это может занять оооочень много времени.
Запусти программу и сравни скорость работы всех 3х стратегий.

P.S. Обрати внимание на наличие всех необходимых полей в классе FileStorageStrategy, по аналогии с OurHashMapStorageStrategy:
static final int DEFAULT_INITIAL_CAPACITY
static final long DEFAULT_BUCKET_SIZE_LIMIT
FileBucket[] table
int size
private long bucketSizeLimit = DEFAULT_BUCKET_SIZE_LIMIT
long maxBucketSize



Shortener (12)

Напишем еще одну стратегию, назовем ее FileStorageStrategy. Она будет очень похожа
на стратегию OurHashMapStorageStrategy, но в качестве ведер (англ. buckets) будут
файлы. Я знаю, ты знаешь о каких buckets идет речь, если нет &ndash; повтори внутреннее
устройство HashMap.
9.1.	Создай класс FileBucket в пакете strategy.
9.2.	Добавь в класс поле Path path. Это будет путь к файлу.
9.3.	Добавь в класс конструктор без параметров, он должен:
9.3.1.	Инициализировать path временным файлом. Файл должен быть размещен
в директории для временных файлов и иметь случайное имя. Подсказка:
Files.createTempFile.
9.3.2.	Создавать новый файл, используя path. Если такой файл уже есть, то
заменять его.
9.3.3.	Обеспечивать удаление файла при выходе из программы. Подсказка:
deleteOnExit().
9.4.	Добавь в класс методы:
9.4.1.	public long getFileSize(), он должен возвращать размер файла на который
указывает path.
9.4.2.	public void putEntry(Entry entry) - должен сериализовывать переданный entry в
файл. Учти, каждый entry может содержать еще один entry.
9.4.3.	public Entry getEntry() - должен забирать entry из файла. Если файл имеет нулевой
размер, вернуть null.
9.4.4.	public void remove() &ndash; удалять файл на который указывает path.
Конструктор и методы не должны кидать исключения.



Shortener (12)

Добавь и реализуй класс OurHashMapStorageStrategy, используя класс Entry из
предыдущей подзадачи. Класс OurHashMapStorageStrategy должен реализовывать
интерфейс StorageStrategy.
8.1. Добавь в класс следующие поля:
8.1.1. static final int DEFAULT_INITIAL_CAPACITY = 16;
8.1.2. static final float DEFAULT_LOAD_FACTOR = 0.75f;
8.1.3. Entry[] table = new Entry[DEFAULT_INITIAL_CAPACITY];
8.1.4. int size;
8.1.5. int threshold = (int) (DEFAULT_INITIAL_CAPACITY * DEFAULT_LOAD_FACTOR);
8.1.6. float loadFactor = DEFAULT_LOAD_FACTOR;
8.2. Реализуй в классе следующие вспомогательные методы:
8.2.1. int hash(Long k)
8.2.2. int indexFor(int hash, int length)
8.2.3. Entry getEntry(Long key)
8.2.4. void resize(int newCapacity)
8.2.5. void transfer(Entry[] newTable)
8.2.6. void addEntry(int hash, Long key, String value, int bucketIndex)
8.2.7. void createEntry(int hash, Long key, String value, int bucketIndex)
8.3. Добавь в класс публичные методы, которые требует интерфейс StorageStrategy.
Какие-либо дополнительные поля класса не использовать. Методы, не описанные в
задании, реализовывать не нужно. Если возникнут вопросы как реализовать какой-то
метод или что он должен делать, то ты всегда можешь посмотреть, как работает
похожий метод в HashMap.
Можешь добавить в метод main класса Solution тестирование новой стратегии. Запусти
и сравни время работы двух стратегий на одинаковом количестве элементов.



Shortener (12)

Приступим к реализации второй стратегии OurHashMapStorageStrategy. Она не будет
использовать готовый HashMap из стандартной библиотеки, а будет сама являться
коллекцией.

7.1.	Разберись как работает стандартный HashMap, посмотри его исходники или
погугли статьи на эту тему.
7.2.	Если ты честно выполнил предыдущий пункт, то ты знаешь для чего используется
класс Node поддерживающий интерфейс Entry внутри HashMap. Создай свой аналог внутри пакета
strategy. Это должен быть обычный, не вложенный, не generic класс. Сделай его публичным.
В отличии от класса Node из HashMap, наш класс будет поддерживать только
интерфейс Serializable и будет называться Entry.
7.3.	Добавь в Entry следующие поля: Long key, String value, Entry next, int hash. Как
видишь, наша реализация будет поддерживать только тип Long для ключа и только
String для значения. Область видимости полей оставь по умолчанию.
7.4.	Добавь и реализуй конструктор Entry(int hash, Long key, String value, Entry next).
7.5.	Добавь и реализуй методы: Long getKey(), String getValue(), int hashCode(), boolean equals() и String
toString(). Реализовывать остальные методы оригинального Entry не нужно, мы
пишем упрощенную версию.



