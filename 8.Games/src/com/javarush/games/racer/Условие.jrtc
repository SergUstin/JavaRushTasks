taskKey="com.javarush.games.racer.part24"\n\nИгра Racer (24/28)

Чтобы проверять выполнение условий победы, нам нужно будет знать реальное количество машин, с которыми разминулся игрок.
Для этого создай поле passedCarsCount в классе RoadManager и геттер к нему.
Значение этого поля должно увеличиваться на единицу после прохождения каждой машины-препятствия (удаления машины из списка items).

Сравнивать passedCarsCount и RACE_GOAL_CARS_COUNT будем в методе onTurn(int).
Если значение passedCarsCount больше или равно RACE_GOAL_CARS_COUNT, значит цель достигнута и нужно показать финишную линию.


Требования:
1.	В классе RoadManager должно существовать приватное поле passedCarsCount типа int, инициализированное при объявлении значением 0.
2.	В классе RoadManager должен существовать публичный геттер int getPassedCarsCount(), который возвращает значение поля passedCarsCount.
3.	В методе deletePassedItems() класса RoadManager необходимо увеличивать значение поля passedCarsCount на единицу, если из списка items удаляется объект и тип этого объекта &mdash; не шипы.
4.	В методе onTurn(int) класса RacerGame необходимо вызвать у объекта finishLine метод show(), если значение, которое вернул метод roadManager.getPassedCarsCount(), больше либо равно RACE_GOAL_CARS_COUNT.
5.	В методе onTurn(int) класса RacerGame метод show() объекта finishLine должен вызываться до moveAll().


Игра Racer (24/28)

В этой части реализуем прорисовку и движение финишной линии. Для этого ее экземпляр должен храниться в основном классе игры и пересоздаваться при старте новой игры.
Методы draw(Game) и move(int) экземпляра класса FinishLine, как и у всех объектов, будут вызываться каждые 40мс, но результат их вызова будет игнорироваться до вызова метода show().
Также давай определимся с условиями победы. Чтобы прохождение игры было достаточно сложным и интересным, победа должна наступать после преодоления 40 машин-препятствий.
Будем хранить это значение в константе RACE_GOAL_CARS_COUNT.



Игра Racer (24/28)

Приступим к созданию финишной линии. Матрица для нее уже есть в ShapeMatrix.
Финишная линия появится на трассе в конце игры.
На самом деле объект финишной линии создается в начале игры, но находится выше игрового поля, поэтому невидим.
Как только флаг, ответственный за отображение FinishLine, получит значение true, финишная линия начнет движение вниз и появится на игровом поле.



Игра Racer (24/28)

Давай немного усложним игру.
Добавим машину с &quot;пьяным&quot; водителем.
Для ее представления на игровом поле в пакет road был добавлен новый класс MovingCar. Используй его для создания таких машин.
В отличие от обычных машин, &quot;пьяный&quot; водитель будет двигаться и по горизонтали.
Чтобы он не пересекался с другими машинами, в методе move() класса MovingCar, происходит проверка таких пересечений.
Для этого в метод move(int boost), кроме скорости, нужно еще передавать список всех объектов-препятствий.

Еще одна тонкость заключается в том, что MovingCar &mdash; наследник класса RoadObject, и переопределяет его метод move,
поэтому необходимо добавить второй аргумент и методу move в родительском классе.

При большом количестве &quot;пьяных&quot; водителей на трассе игра станет слишком сложной, поэтому позаботься о том,
чтобы на трассе одновременно была только одна такая машина.
Для проверки этого реализуй метод isMovingCarExists() по аналогии с методом isThornExists().

За генерацию MovingCar будет отвечать отдельный метод void generateMovingCar(Game).
Его реализация аналогична реализации метода generateThorn(Game).



Игра Racer (24/28)

Сейчас встречных машин слишком много.
Чтобы игру можно было пройти, промежутки между препятствиями должны быть достаточно большими.
С другой стороны, если они будут слишком большие, игра станет очень простой и не такой интересной.
Оптимальным расстоянием будет 12: оно соответствует габаритам машины игрока с небольшим запасом.
Это значение будем хранить в константе PLAYER_CAR_DISTANCE.

Реализуй метод boolean isRoadSpaceFree(RoadObject object), который будет проверять,
есть ли достаточно свободного места на дороге для размещения новой машины.
В этом тебе поможет метод isCollisionWithDistance(GameObject, int). Этот метод возвращает false,
если расстояние между объектами по горизонтали и вертикали больше переданной дистанции.
Если на дороге есть свободное место, добавляй новую машину в items.



Игра Racer (24/28)

Кроме шипов, на трассе неплохо бы смотрелись машины разных типов.
Для представления машин на игровом поле создай в пакете road общий для всех типов машин класс Car и унаследуй его от RoadObject.
Все машины будут двигаться со скоростью 1.

Так как метод createRoadObject(RoadObjectType, int, int) класса RoadManager отвечает за создание всех дорожных объектов,
вместо null он должен возвращать новый объект типа Car.
Для генерации новых машин создай метод generateRegularCar(Game game) в классе RoadManager.
Чтобы трасса не была слишком загружена, новая машина должна создаваться с вероятностью 30%.
Тип машины должен быть случайно выбран из первых четырех элементов RoadObjectType.
Не забудь каждую созданную машину добавить в список items.



