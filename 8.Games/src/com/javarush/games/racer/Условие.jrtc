taskKey="com.javarush.games.racer.part12"\n\nИгра Racer (12/28)

Объекты-препятствия должны появляться в пределах проезжей части в случайной позиции.

В классе RoadManager введи две константы: FIRST_LANE_POSITION и FOURTH_LANE_POSITION &mdash; крайняя левая и крайняя правая
позиции координат x матриц объектов-препятствий на проезжей части. Присвой им значения 16 и 44 соответственно.

Также в классе RoadManager должен существовать список всех текущих объектов-препятствий.

В этом же классе создай метод addRoadObject(RoadObjectType, Game), который будет генерировать позицию нового препятствия
и добавлять его в список всех объектов-препятствий. Координаты препятствия должны генерироваться следующим образом:
x = game.getRandomNumber(FIRST_LANE_POSITION, FOURTH_LANE_POSITION) &mdash; случайное число в пределах проезжей части;
y = -1 * RoadObject.getHeight(type) &mdash; изначально объект располагается за пределами игрового поля, чтобы появиться плавно.


Требования:
1.	В классе RoadManager должно существовать приватное статическое final int поле FIRST_LANE_POSITION, проинициализированное при объявлении значением 16.
2.	В классе RoadManager должно существовать приватное статическое final int поле FOURTH_LANE_POSITION, проинициализированное при объявлении значением 44.
3.	В классе RoadManager должно существовать приватное поле items типа List&lt;RoadObject&gt;, инициализированное при объявлении значением нового ArrayList.
4.	В классе RoadManager должен существовать приватный метод void addRoadObject(RoadObjectType type, Game game).
5.	В методе addRoadObject(RoadObjectType, Game) должна создаваться локальная переменная int x и при создании инициализироваться значением game.getRandomNumber(FIRST_LANE_POSITION, FOURTH_LANE_POSITION).
6.	В методе addRoadObject(RoadObjectType, Game) должна создаваться локальная переменная int y, и при создании инициализироваться значением -1 * RoadObject.getHeight(type).
7.	В методе addRoadObject(RoadObjectType, Game) должен вызываться метод createRoadObject(RoadObjectType, int, int) с параметрами: type (параметр метода), x и y (локальные переменные метода).
8.	В методе addRoadObject(RoadObjectType, Game) результат вызова метода createRoadObject(RoadObjectType, int, int) должен добавляться в список items, если он не равен null.
9.	В классе RoadManager должен быть импорт класса com.javarush.engine.cell.Game.


Игра Racer (12/28)

На пути игрока будут различные препятствия: другие машины, едущие навстречу, и шипы, неподвижные относительно трассы.
Эти препятствия будут наследоваться от класса RoadObject. Типы всех возможных препятствий перечислены в enum RoadObjectType.
Эти классы появились у тебя в пакете road. А класс ShapeMatrix пополнился новыми матрицами для отображения препятствий.
Просмотри класс RoadObject и его методы.

На этом этапе займемся шипами. Создай класс Thorn (шипы) и унаследуй его от RoadObject.
Для создания объектов-препятствий в классе RoadManager создай метод private RoadObject createRoadObject(RoadObjectType type, int x, int y),
который в зависимости от полученных параметров будет создавать и возвращать новое препятствие.
Пока у нас есть единственный тип препятствий &mdash; Thorn, поэтому если метод createRoadObject получит в качестве аргумента какой-то другой тип, он должен вернуть null.
Зная тип игрового объекта, не нужно передавать ему матрицу изображения в конструкторе, поэтому в классе GameObject понадобится еще один конструктор с двумя параметрами:
int x, int y, который устанавливает соответствующие значения полям x, y.



Игра Racer (12/28)

На данный момент поведение машины не совсем соответствует ожидаемому:
- машина не перестает двигаться в сторону, когда кнопка направления отпущена;
- машина выезжает за границы дороги и игрового поля.
Чтобы это исправить, нужно реализовать поведение машины при отпускании клавиш RIGHT и LEFT.
Переопредели метод onKeyReleased(Key) и в нём устанавливай машине направление Direction.NONE, если это необходимо.
Для регулировки дорожного движения в пакете road создай класс RoadManager.
В нём создай поля, которые будут хранить x-координаты границ проезжей части.
Используй их в методе move() класса PlayerCar, чтобы не допустить выезд машины за пределы дороги.
Если проверять границы дороги до изменения координаты x машины игрока, она сможет выезжать одним колесом на обочину.
А если сначала изменить х, а потом проверить границы, машина игрока будет строго ограничена трассой.
Выбор за тобой.



Игра Racer (12/28)

По горизонтали машина может двигаться вправо, влево или вообще не двигаться. Чтобы определять эти направления, создай enum Direction
со значениями: RIGHT, LEFT, NONE.
У машины игрока должно быть поле, хранящее направление движения (Direction direction).
Обращаться к нему будем через геттер и сеттер.
В классе PlayerCar создай метод move(), который в зависимости от направления движения будет менять
координаты машины по горизонтали. Вызываться этот метод будет в moveAll().
Чтобы обрабатывать нажатие клавиш, переопредели метод onKeyPress(Key). В зависимости от нажатой клавиши, устанавливай соответствующее
направление машине игрока, используя сеттер.



Игра Racer (12/28)

Прерывистые полосы должны двигаться, создавая эффект движения машины, а сама машина будет всегда находиться внизу игрового экрана.
Добавим машине поле, отвечающее за скорость. Его значение будет передаваться в roadMarking.move(int) и сообщать, насколько быстро нужно двигать разметку.
В RacerGame создадим метод moveAll(), который будет перемещать все подвижные игровые объекты (пока только разметку).
moveAll() должен вызываться каждые 40 мс. Для этого в RacerGame нужно переопределить метод onTurn(int) и задать интервал в методе createGame().
Как работать с onTurn(int) &mdash; можешь прочить в описании движка: https://javarush.ru/groups/posts/2056-razdel-igrih-na-javarush-chastjh-3-obrabotka-sobihtiy



Игра Racer (12/28)

Сейчас займемся созданием машины игрока.
Для этого создадим класс PlayerCar и унаследуем его от GameObject.
Вначале машина игрока будет находиться в третьей по счету полосе движения и на одну позицию выше нижнего края игрового поля.
Поэтому координата x будет равняться RacerGame.WIDTH/2 + 2, а y &mdash; RacerGame.HEIGHT - playerCarHeight - 1.
Матрица для машины уже есть в ShapeMatrix.
Для обращения к машине игрока, экземпляр класса PlayerCar должен храниться в переменной player класса RacerGame.
Чтобы увидеть машину на игровом поле, вызови у нее метод draw(Game).



