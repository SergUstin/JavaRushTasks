taskKey="com.javarush.games.racer.part08"\n\nИгра Racer (8/28)

Прерывистые полосы должны двигаться, создавая эффект движения машины, а сама машина будет всегда находиться внизу игрового экрана.
Добавим машине поле, отвечающее за скорость. Его значение будет передаваться в roadMarking.move(int) и сообщать, насколько быстро нужно двигать разметку.
В RacerGame создадим метод moveAll(), который будет перемещать все подвижные игровые объекты (пока только разметку).
moveAll() должен вызываться каждые 40 мс. Для этого в RacerGame нужно переопределить метод onTurn(int) и задать интервал в методе createGame().
Как работать с onTurn(int) &mdash; можешь прочить в описании движка: https://javarush.ru/groups/posts/2056-razdel-igrih-na-javarush-chastjh-3-obrabotka-sobihtiy


Требования:
1.	В классе PlayerCar должно существовать публичное поле speed типа int, инициализированное при объявлении значением 1.
2.	В классе RacerGame должен существовать приватный метод void moveAll().
3.	В методе moveAll() у объекта roadMarking должен быть вызван метод move(int). В качестве параметра передай в метод скорость игрока.
4.	В классе RacerGame должен быть переопределен метод onTurn(int) родительского класса Game.
5.	В методе onTurn(int) должен быть вызван метод moveAll().
6.	В методе onTurn(int) должен быть вызван метод drawScene() после вызова метода moveAll().
7.	В методе createGame() класса RacerGame должен быть вызван метод setTurnTimer(int) класса Game с параметром 40.


Игра Racer (8/28)

Сейчас займемся созданием машины игрока.
Для этого создадим класс PlayerCar и унаследуем его от GameObject.
Вначале машина игрока будет находиться в третьей по счету полосе движения и на одну позицию выше нижнего края игрового поля.
Поэтому координата x будет равняться RacerGame.WIDTH/2 + 2, а y &mdash; RacerGame.HEIGHT - playerCarHeight - 1.
Матрица для машины уже есть в ShapeMatrix.
Для обращения к машине игрока, экземпляр класса PlayerCar должен храниться в переменной player класса RacerGame.
Чтобы увидеть машину на игровом поле, вызови у нее метод draw(Game).



Игра Racer (8/28)

Дорожное полотно, обочина и сплошная разделительная полоса &mdash; статические объекты: они не будут двигаться.
Эффект движения будет создаваться другими игровыми объектами. Пока машины у нас отсутствуют, двигаться будут только две прерывистые полосы на дороге.
Дополнительная дорожная разметка будет представляться отдельным объектом. Создавать ее не нужно &ndash; класс RoadMarking есть у тебя в пакете с игрой.
Просмотри код этого класса. Кроме конструктора, RoadMarking содержит еще 2 метода: move(int) - отвечает за передвижение и draw(Game) - за отрисовку объекта.
На данном этапе займемся только отрисовкой. В качестве аргумента метод draw(Game) принимает объект, на котором должен отрисоваться.
В нашем случае это текущий экземпляр класса RacerGame (this).
Также у тебя появился класс ShapeMatrix, который хранит числовые матрицы изображения игровых объектов. Числа в матрице означают порядковый номер цвета в enum Color.
Благодаря числовой матрице изображения, объект будет знать, в какой цвет раскрасить каждую координату.
Сейчас в ShapeMatrix находится матрица только для прерывистых полос дорожной разметки, но в будущем туда будут добавляться и другие модели изображения объектов.

Добавь в RacerGame поле типа RoadMarking, инициализируй его в методе createGame() и отрисуй в методе drawScene().
Отрисовка прерывистой полосы должна происходить после отрисовки (поверх) статических объектов.




Игра Racer (8/28)

Для представления игровых объектов создай класс GameObject. У всех игровых объектов будут общие черты:
- координаты (int x, int y) &mdash; координаты верхнего левого угла объекта на игровом поле;
- матрица отображения игрового объекта (int[][] matrix). Значения матрицы &mdash; порядковые номера цветов в Color.
Чтобы получить цвет, нужно использовать Color.values()[matrix[i][j]], где:
i &mdash; координата y в матрице matrix,
j &mdash; координата x в матрице matrix.
- высота и ширина (int height, int width). Высота и ширина соответствуют размерам матрицы.
Также у объекта должен существовать метод, который его рисует.



Игра Racer (8/28)

В процессе игры появятся много объектов, которые будут двигаться по игровому полю и иногда его покидать.
В случае вызова метода setCellColor(int, int, Color) с координатами, лежащими за пределами игрового поля, будет выбрасываться исключение.
Чтобы этого не произошло, переопредели его таким образом, чтобы вызов родительского метода происходил только с координатами, лежащими на игровом поле.
Подсказка: для вызова родительского метода используй ключевое слово super.



Игра Racer (8/28)

Приступим к отрисовке трассы в методе drawField().
Для установки цвета определенной ячейке используется метод setCellColor(int, int, Color). В качестве аргументов передаются координаты x, y и цвет.
Нужно учесть, что игровое поле состоит из трех зон, которые должны быть раскрашены разными цветами:
1. Обочина - боковые части игрового поля, по которым не осуществляется движение.
Высота: вся высота игрового поля;
Ширина: от 0 до ROADSIDE_WIDTH (не включительно) и от WIDTH - ROADSIDE_WIDTH (включительно) до WIDTH.
2. Дорога - дорожное полотно, по которому будут двигаться машины.
Высота: вся высота игрового поля;
Ширина: от ROADSIDE_WIDTH(включительно) до WIDTH - ROADSIDE_WIDTH (не включительно), кроме CENTER_X.
3. Разделительная полоса - белая полоса, которая разделяет дорогу пополам.
Высота: вся высота игрового поля;
Ширина: 1 клетка игрового поля, с координатой x = CENTER_X.
Раскраска делается в цикле.
В результате должна получиться примерно такая трасса:
!! картинка !!
P.S.: Цвета можешь выбрать на свое усмотрение.




