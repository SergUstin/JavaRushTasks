taskKey="com.javarush.games.moonlander.part04"\n\nИгра Moon Lander (4/23)

Кроме координат, у игрового объекта будет матрица, отвечающая за внешний вид. Давай добавим в класс GameObject
переменную matrix типа int[][] для ее хранения. А теперь займемся посадочным лунным модулем.
Для простоты будем называть его просто ракетой. Создадим класс Rocket, наследуемый от класса GameObject, так как ракета &mdash; это игровой объект.
Обрати внимание, что у нас появился вспомогательный класс
ShapeMatrix, который хранит матрицу, отвечающую за внешний вид ракеты.


Требования:
1.	В классе GameObject должно существовать публичное поле matrix типа int[][].
2.	В классе GameObject конструктор, который принимает 2 параметра типа double, должен быть удален.
3.	В классе GameObject должен появиться публичный конструктор с тремя параметрами: double, double, int[][], который устанавливает соответствующие значения полям x, y и полю matrix.
4.	В классе GameObject должен существовать только один конструктор.
5.	Должен существовать публичный класс Rocket.
6.	Класс Rocket должен быть наследником класса GameObject.
7.	В классе Rocket должен существовать один публичный конструктор с двумя параметрами типа double (x и y), который вызывает конструктор базового класса с параметрами x, y и ShapeMatrix.ROCKET, используя ключевое слово &quot;super&quot;.


Игра Moon Lander (4/23)

Так как в Moon Lander будут использоваться игровые объекты, давай создадим класс GameObject, в который вынесем
их общие характеристики. На данном этапе это координаты x и y.



Игра Moon Lander (4/23)

На данном этапе давай создадим метод drawScene(). В нем мы окрасим все ячейки игрового поля в один цвет.
В этом нам поможет метод setCellColor(int, int, Color) класса Game, параметры которого &mdash; координаты и цвет ячейки.
Вызовем его со всеми координатами от 0 до WIDTH и от 0 до HEIGHT и любым цветом (например, Color.ORANGE).

Также нам понадобится метод createGame(). Он будет отвечать за создание игры.
Но сейчас мы вызовем в нем только метод отрисовки drawScene().
Сам метод createGame() вызовем в методе initialize() после вызова setScreenSize(int, int).



Игра Moon Lander (4/23)

Сегодня мы предлагаем тебе написать увлекательную игру &mdash; Moon Lander. Как всегда, начнем с правил.
Цель &ndash; опустить посадочный модуль на лунную поверхность. Для этого игроку нужно преодолеть притяжение Луны,
используя кормовой ускоритель для замедления падения и боковые ускорители для перемещения корабля влево или вправо.
Рельеф у местности ухабистый, и есть всего одна плоская область для мягкой посадки &mdash; &laquo;платформа&raquo;. Если игрок успешно совершает посадку, он выигрывает.
Количество очков зависит от длительности посадки: чем дольше игрок совершает посадку, тем меньше очков он получит в итоге. Игра окончена, когда игрок разбивается
о поверхность Луны. Итак, начнем с главного класса игры MoonLanderGame. Унаследуем его от класса Game. Этот класс, как ты помнишь, содержит в себе методы,
которые помогут нам в реализации игры.
Теперь реализуем игровое поле. Для этого нам необходимо переопределить метод initialize(), в котором, в свою очередь, нужно вызвать метод setScreenSize(int, int).
Этот метод задает ширину и высоту игрового поля, которые он принимает в качестве параметров. Их будем хранить в переменных.



