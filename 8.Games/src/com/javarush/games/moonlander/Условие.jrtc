taskKey="com.javarush.games.moonlander.part09"\n\nИгра Moon Lander (9/23)

На этом этапе займемся реализацией методов onKeyPress и onKeyReleased. Как ты мог понять из названия, метод onKeyPress
вызывается при нажатии любой клавиши, а метод onKeyReleased при отпускании. Перейдем к реализации метода onKeyPress. Он должен
обрабатывать нажатия клавиш вверх, влево и вправо и выставлять флагам (полям) соответствующие значения. Учти, что при нажатии
клавиши влево нужно установить значение false флагу isRightPressed, и наоборот. Кроме того, не забудь сбрасывать
соответствующие флаги при отпускании клавиш в методе onKeyReleased.


Требования:
1.	В классе MoonLanderGame должен быть переопределен метод onKeyPress(Key) родительского класса Game.
2.	Метод onKeyPress(Key) должен устанавливать полю isUpPressed значение true, если параметр метода равен Key.UP.
3.	Если параметр метода onKeyPress(Key) равен Key.LEFT, метод должен устанавливать полю isLeftPressed значение true, а полю isRightPressed значение false.
4.	Если параметр метода onKeyPress(Key) равен Key.RIGHT, метод должен устанавливать полю isRightPressed значение true, а полю isLeftPressed значение false.
5.	В классе MoonLanderGame должен быть переопределен метод onKeyReleased(Key) родительского класса Game.
6.	Метод onKeyReleased(Key) должен устанавливать полю isUpPressed значение false, если параметр метода равен Key.UP.
7.	Метод onKeyReleased(Key) должен устанавливать полю isLeftPressed значение false, если параметр метода равен Key.LEFT.
8.	Метод onKeyReleased(Key) должен устанавливать полю isRightPressed значение false, если параметр метода равен Key.RIGHT.


Игра Moon Lander (9/23)

Продолжим реализовывать движение ракеты. Давай добавим поля, которые будут ответственны за состояние клавиш,
благодаря которым мы перемещаем ракету по экрану. Эти поля будут принимать только два значения: true, если клавиша нажата, иначе false.
Для управления ракетой нам понадобится всего три клавиши: вверх, влево и вправо. За нажатие клавиши вверх будет
отвечать поле isUpPressed, влево &mdash; isLeftPressed, вправо &mdash; isRightPressed. В начале игры эти поля должны быть в
состоянии false, так как ни одна клавиша еще не нажата. Реализацией движения мы займемся в следующих частях.



Игра Moon Lander (9/23)

Давай займемся реализацией движения ракеты. Для начала создадим метод move() и в нем реализуем свободное падение.
Падение должно происходить с ускорением, то есть нам нужно постоянно увеличивать его скорость. За скорость движения
по оси Y будет отвечать переменная speedY, а увеличивать ее на каждом шаге игры мы будем на величину boost. Все действия,
которые происходят на каждом шаге, необходимо выполнять в методе onTurn(int). Чтобы задать частоту работы этого метода, мы
будем использовать метод setTurnTimer. Он принимает на вход параметр &mdash; длительность каждого шага в миллисекундах.
Если ты все сделал правильно, запустив программу, ты увидишь падение ракеты.
Обрати внимание: после того, как ракета &quot;уходит&quot; за пределы экрана, мы получаем много исключений.
Это происходит потому, что игровой движок пытается отрисовать ее
по несуществующим координатам. Давай это починим. Переопредели метод setCellColor и реализуй его так, чтобы метод
суперкласса вызывался только для корректных координат.



Игра Moon Lander (9/23)

Ракета у нас уже есть, теперь займемся отрисовкой ландшафта. Его матрицу мы сделали для тебя: ты ее найдешь
в классе ShapeMatrix. Ландшафт &mdash; это тоже игровой объект, поэтому создадим метод, который будет отвечать за инициализацию подобных объектов.
В нем будут создаваться ландшафт и ракета.
Как ты заметил, на экране есть сетка. С одной стороны, она помогает эффективнее работать с игровым полем,
а с другой &mdash; мешает игровому процессу, поэтому на данном
этапе мы ее скроем. В дальнейшем ты сможешь ее включать, если тебе это понадобится при разработке.



Игра Moon Lander (9/23)

Мы будем часто пользоваться такими параметрами как ширина и высота игрового объекта. Следовательно, вынесем их в
отдельные переменные класса GameObject. Чтобы объект мог отрисовываться на игровом поле, добавим ему метод draw.
Этот метод будет принимать в качестве параметра объект класса Game. Теперь мы сможем задавать цвет ячейки на экране,
вызвав метод setCellColor с нужными параметрами. Обрати внимание, что x и y объекта типа GameObject &mdash; это координаты
левого верхнего угла матрицы matrix. Чтобы отобразить объект matrix на игровом поле, в качестве параметров
в метод setCellColor необходимо передать: x объекта + x в матрице, y объекта + y в матрице, цвет из матрицы.
Все описанное выше уже реализовано в классе GameObject, посмотри и разберись.

В классе MoonLanderGame создадим переменную ракеты и инициализируем ее в createGame().
Отрисуем ракету в drawScene() вызвав: rocket.draw(this);



Игра Moon Lander (9/23)

Кроме координат, у игрового объекта будет матрица, отвечающая за внешний вид. Давай добавим в класс GameObject
переменную matrix типа int[][] для ее хранения. А теперь займемся посадочным лунным модулем.
Для простоты будем называть его просто ракетой. Создадим класс Rocket, наследуемый от класса GameObject, так как ракета &mdash; это игровой объект.
Обрати внимание, что у нас появился вспомогательный класс
ShapeMatrix, который хранит матрицу, отвечающую за внешний вид ракеты.



