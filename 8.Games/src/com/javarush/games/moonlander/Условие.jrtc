taskKey="com.javarush.games.moonlander.part07"\n\nИгра Moon Lander (7/23)

Давай займемся реализацией движения ракеты. Для начала создадим метод move() и в нем реализуем свободное падение.
Падение должно происходить с ускорением, то есть нам нужно постоянно увеличивать его скорость. За скорость движения
по оси Y будет отвечать переменная speedY, а увеличивать ее на каждом шаге игры мы будем на величину boost. Все действия,
которые происходят на каждом шаге, необходимо выполнять в методе onTurn(int). Чтобы задать частоту работы этого метода, мы
будем использовать метод setTurnTimer. Он принимает на вход параметр &mdash; длительность каждого шага в миллисекундах.
Если ты все сделал правильно, запустив программу, ты увидишь падение ракеты.
Обрати внимание: после того, как ракета &quot;уходит&quot; за пределы экрана, мы получаем много исключений.
Это происходит потому, что игровой движок пытается отрисовать ее
по несуществующим координатам. Давай это починим. Переопредели метод setCellColor и реализуй его так, чтобы метод
суперкласса вызывался только для корректных координат.


Требования:
1.	В классе Rocket должно существовать приватное поле speedY типа double, проинициализированное при объявлении значением 0.
2.	В классе Rocket должно существовать приватное поле boost типа double, проинициализированное при объявлении значением 0.05.
3.	В классе Rocket должен существовать публичный метод void move().
4.	В методе move() поле speedY должно увеличиваться на значение boost.
5.	В методе move() поле y должно быть увеличено на значение speedY, после того как поле speedY было изменено.
6.	В методе createGame() класса MoonLanderGame должен быть вызван метод setTurnTimer(int) класса Game с параметром 50.
7.	В классе MoonLanderGame должен быть переопределен метод onTurn(int) родительского класса Game.
8.	В методе onTurn(int) у объекта rocket должен быть вызван метод move().
9.	В методе onTurn(int) должен быть вызван метод drawScene() после вызова rocket.move().
10.	В классе MoonLanderGame должен быть переопределен метод setCellColor(int, int, Color) родительского класса Game.
11.	В методе setCellColor(int, int, Color), если параметр метода x, или y находится за пределами поля, метод не должен ничего делать.
12.	В методе setCellColor(int, int, Color) должен вызываться метод базового класса, используя ключевое слово &quot;super&quot;.


Игра Moon Lander (7/23)

Ракета у нас уже есть, теперь займемся отрисовкой ландшафта. Его матрицу мы сделали для тебя: ты ее найдешь
в классе ShapeMatrix. Ландшафт &mdash; это тоже игровой объект, поэтому создадим метод, который будет отвечать за инициализацию подобных объектов.
В нем будут создаваться ландшафт и ракета.
Как ты заметил, на экране есть сетка. С одной стороны, она помогает эффективнее работать с игровым полем,
а с другой &mdash; мешает игровому процессу, поэтому на данном
этапе мы ее скроем. В дальнейшем ты сможешь ее включать, если тебе это понадобится при разработке.



Игра Moon Lander (7/23)

Мы будем часто пользоваться такими параметрами как ширина и высота игрового объекта. Следовательно, вынесем их в
отдельные переменные класса GameObject. Чтобы объект мог отрисовываться на игровом поле, добавим ему метод draw.
Этот метод будет принимать в качестве параметра объект класса Game. Теперь мы сможем задавать цвет ячейки на экране,
вызвав метод setCellColor с нужными параметрами. Обрати внимание, что x и y объекта типа GameObject &mdash; это координаты
левого верхнего угла матрицы matrix. Чтобы отобразить объект matrix на игровом поле, в качестве параметров
в метод setCellColor необходимо передать: x объекта + x в матрице, y объекта + y в матрице, цвет из матрицы.
Все описанное выше уже реализовано в классе GameObject, посмотри и разберись.

В классе MoonLanderGame создадим переменную ракеты и инициализируем ее в createGame().
Отрисуем ракету в drawScene() вызвав: rocket.draw(this);



Игра Moon Lander (7/23)

Кроме координат, у игрового объекта будет матрица, отвечающая за внешний вид. Давай добавим в класс GameObject
переменную matrix типа int[][] для ее хранения. А теперь займемся посадочным лунным модулем.
Для простоты будем называть его просто ракетой. Создадим класс Rocket, наследуемый от класса GameObject, так как ракета &mdash; это игровой объект.
Обрати внимание, что у нас появился вспомогательный класс
ShapeMatrix, который хранит матрицу, отвечающую за внешний вид ракеты.



Игра Moon Lander (7/23)

Так как в Moon Lander будут использоваться игровые объекты, давай создадим класс GameObject, в который вынесем
их общие характеристики. На данном этапе это координаты x и y.



Игра Moon Lander (7/23)

На данном этапе давай создадим метод drawScene(). В нем мы окрасим все ячейки игрового поля в один цвет.
В этом нам поможет метод setCellColor(int, int, Color) класса Game, параметры которого &mdash; координаты и цвет ячейки.
Вызовем его со всеми координатами от 0 до WIDTH и от 0 до HEIGHT и любым цветом (например, Color.ORANGE).

Также нам понадобится метод createGame(). Он будет отвечать за создание игры.
Но сейчас мы вызовем в нем только метод отрисовки drawScene().
Сам метод createGame() вызовем в методе initialize() после вызова setScreenSize(int, int).



