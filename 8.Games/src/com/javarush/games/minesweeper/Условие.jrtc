taskKey="com.javarush.games.minesweeper.part09"\n\nИгра сапер (9/16)

Согласно правилам игры, при открытии ячейки, количество &quot;заминированных&quot; соседей которой равно нулю,
открывается некоторая &quot;не заминированная&quot; область до ячеек с &quot;заминированными&quot;
соседями. Давай это реализуем... Предлагаю использовать рекурсию. Ее применяют тогда,
когда алгоритм решения задачи совпадает с алгоритмом решения подзадачи (части). У нас как раз такой случай.
При открытии ячейки с нулевым количеством &quot;заминированных&quot; соседей нам нужно сделать полный перебор всех
закрытых соседних ячеек, вызвать у них метод openTile(int, int) и повторить процесс.
Также в методе openTile(int, int) реализуем показ в ячейке количества &quot;заминированных&quot; соседей.
Запусти игру, чтобы проверить корректность реализации.
Подсказка: если получил java.lang.StackOverflowError, значит ты поздно устанавливаешь флаг, что ячейка уже открыта.


Требования:
1.	В методе openTile(int, int), если элемент не является миной и количество соседей-мин равно нулю, для каждого не открытого соседа должен рекурсивно вызываться метод openTile(int, int).
2.	Метод openTile(int, int) должен вызывать метод getNeighbors(GameObject), если элемент не является миной и количество соседей-мин равно нулю.
3.	В методе openTile(int, int), если элемент не является миной и количество соседей мин не равняется нулю, на игровое поле должно выводиться количество заминированных соседей. Используй метод setCellNumber(int, int, int).
4.	Метод openTile(int, int) не должен ничего выводить, если элемент не является миной и количество соседей мин равно нулю. Используй пустую строку.


Игра сапер (9/16)

Согласно правилам игры, в помощь игроку даются флаги. Они нужны, чтобы
помечать потенциально &quot;заминированные&quot; ячейки. Поэтому количество флагов countFlags должно равняться
количеству мин countMinesOnField. Флаг нужно как-то показывать на игровом поле. Для этого создадим
переменную-константу, которая будет хранить его символ. У каждой ячейки модели должно быть состояние
isFlag, которое покажет нам, помечена ли ячейка флагом или нет.



Игра сапер (9/16)

На данном этапе мы займемся открытием ячеек. Давай создадим метод, отвечающий за это,
и переменную, которая будет хранить состояние ячейки (открыта или нет). При открытии ячейки метод будет:
- рисовать в ячейке мину, если там мина;
- отображать количество мин-соседей, если в ячейке нет мины;
- отмечать ячейку модели открытой;
- менять цвет ячейки.
Символ мины для удобства предлагаем вынести в отдельную переменную-константу. Когда ячейка должна открываться? Правильно,
при клике по ней левой кнопкой мыши. Для обработки такого нажатия существует специальный метод движка &mdash; onMouseLeftClick(int, int).
Давай переопределим его в нашем классе. Он будет вызывать метод открытия ячейки.
Ну и, конечно же, запусти программу и насладись результатом работы.



Игра сапер (9/16)

Теперь давай займемся подсчетом мин в соседних ячейках. Для этого каждой ячейке матрицы добавим параметр
(поле класса), который отвечает за количество &quot;заминированных&quot; соседей. Сначала найдем всех соседей,
а потом посчитаем, сколько из них &quot;заминированы&quot;.
Для получения списка соседей у тебя появился метод getNeighbors(), который принимает один параметр типа GameObject (ячейку).
Осталось в отдельном методе посчитать количество &quot;заминированных&quot; соседей для каждой ячейки из gameField
и внесем это значение в соответствующее поле ячейки матрицы.
Хотя визуально твоя работа не видна (ты же запустил программу, чтобы посмотреть что получилось?), она очень важна для будущих шагов.



Игра сапер (9/16)

Игра &quot;Сапер&quot; не зря так называется. Игроку нужно будет иметь дело с минами, хотя лучше с ними дела не иметь :)
Давай введем в игру эти самые мины. Для этого в класс GameObject внесем изменения, которые учитывают,
что ячейка может быть миной &mdash; это флаг isMine.
Новый конструктор создавать не нужно: достаточно отредактировать существующий.
Кроме того, при создании ячеек матрицы добавь генерацию мин с вероятностью 10%. Самый простой способ это
сделать &mdash; использовать метод getRandomNumber(int n) класса Game, который возвращает случайное число от
0 до n-1 включительно. Следовательно, вероятность генерации определенного числа равна 1/n.
Также не забудь посчитать количество сгенерированных мин в классе MinesweeperGame.
Если все сделал, запусти программу и проверь, что ничего не поломалось :)



Игра сапер (9/16)

Состояние ячеек игрового поля нужно где-то хранить.
Для этой задачи создадим матрицу (двумерный массив) с размерами игрового поля.
Матрицу нужно заполнить объектами GameObject по принципу:
gameField[y][x] = new GameObject(x, y);

Теперь отобразим все ячейки на экране.
В этом нам поможет метод setCellColor(int, int, Color) класса Game, параметры которого &mdash; координаты и цвет ячейки.
Вызовем его для каждой ячейки и передадим в качестве параметров ее координаты и любой цвет (например, Color.ORANGE).
Предлагаем вынести отрисовку матрицы в отдельный метод createGame(),
который потом вызовем из метода initialize(). Запусти программу и посмотри, что получилось.

Подсказка: чтобы вызвать метод setCellColor(int, int, Color) для каждой ячейки матрицы, воспользуйся циклами.



