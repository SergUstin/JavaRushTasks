taskKey="com.javarush.games.minesweeper.part05"\n\nИгра сапер (5/16)

Игра &quot;Сапер&quot; не зря так называется. Игроку нужно будет иметь дело с минами, хотя лучше с ними дела не иметь :)
Давай введем в игру эти самые мины. Для этого в класс GameObject внесем изменения, которые учитывают,
что ячейка может быть миной &mdash; это флаг isMine.
Новый конструктор создавать не нужно: достаточно отредактировать существующий.
Кроме того, при создании ячеек матрицы добавь генерацию мин с вероятностью 10%. Самый простой способ это
сделать &mdash; использовать метод getRandomNumber(int n) класса Game, который возвращает случайное число от
0 до n-1 включительно. Следовательно, вероятность генерации определенного числа равна 1/n.
Также не забудь посчитать количество сгенерированных мин в классе MinesweeperGame.
Если все сделал, запусти программу и проверь, что ничего не поломалось :)


Требования:
1.	В классе GameObject должно существовать публичное поле isMine типа boolean.
2.	В классе GameObject должен существовать один конструктор с тремя параметрами типа int, int, boolean, который устанавливает соответствующие значения полям x, y и isMine в указанном порядке.
3.	В классе MinesweeperGame должно существовать приватное поле countMinesOnField типа int.
4.	В методе createGame() при создании ячеек должно случайным образом задаваться, будет ли эта ячейка с миной. Используй метод getRandomNumber(int) класса Game с параметром 10.
5.	После выполнения метода createGame() полю countMinesOnField должно быть присвоено значение количества мин на поле.


Игра сапер (5/16)

Состояние ячеек игрового поля нужно где-то хранить.
Для этой задачи создадим матрицу (двумерный массив) с размерами игрового поля.
Матрицу нужно заполнить объектами GameObject по принципу:
gameField[y][x] = new GameObject(x, y);

Теперь отобразим все ячейки на экране.
В этом нам поможет метод setCellColor(int, int, Color) класса Game, параметры которого &mdash; координаты и цвет ячейки.
Вызовем его для каждой ячейки и передадим в качестве параметров ее координаты и любой цвет (например, Color.ORANGE).
Предлагаем вынести отрисовку матрицы в отдельный метод createGame(),
который потом вызовем из метода initialize(). Запусти программу и посмотри, что получилось.

Подсказка: чтобы вызвать метод setCellColor(int, int, Color) для каждой ячейки матрицы, воспользуйся циклами.



Игра сапер (5/16)

Так как в нашей игре будут использоваться игровые объекты (ячейки), создадим для их описания
отдельный класс GameObject. Давай подумаем, какие параметры должны быть у игрового объекта? Конечно же, это
координаты его размещения на игровом поле, x и y. Ну и куда же без конструктора? После того, как все сделаешь,
не забудь запустить программу и посмотреть на результат.



Игра сапер (5/16)

Наше игровое поле какое-то маленькое, тебе не кажется? Оно должно быть размером 9х9 ячеек:
1) для указания размеров поля существует метод setScreenSize(int, int)
2) этот метод принимает параметрами ширину и высоту (количество ячеек по ширине и высоте)
3) размеры поля будут часто использоваться, поэтому удобно вынести их в константу SIDE
4) в результате должен получится такой вызов: setScreenSize(SIDE, SIDE);
5) этот вызов должен происходить в методе initialize()
6) значит в классе MinesweeperGame нужно объявить метод initialize()

Проверь результат своей работы &mdash; запусти программу.



Игра сапер (5/16)

Давай напишем увлекательную игру &quot;Сапер&quot;.
Правила игры:
1. Игровое поле разделено на смежные ячейки (квадраты), некоторые из которых &laquo;заминированы&raquo;.
2. Цель игры &mdash; разминировать поле, то есть открыть все ячейки без мин.
3. Если открыта ячейка с миной, игра считается проигранной. Мины расставляются в случайном порядке.
4. Если под открытой ячейкой мины нет, в ней появляется число, показывающее, сколько соседствующих с открытой
ячейкой &quot;заминировано&quot;. Используя эти числа, можно рассчитать расположение мин.
5. Если под соседними ячейками тоже нет мин, открывается некоторая &quot;незаминированная&quot; область до ячеек,
в которых есть цифры.
6. &quot;Заминированные&quot; ячейки можно помечать флагом, чтобы случайно не открыть их. Количество флагов равно
количеству мин на игровом поле.
7. Если все &quot;незаминированные&quot; ячейки открыты, игра считается выигранной.

Теперь приступаем к реализации игры:
Для начала создадим класс игры MinesweeperGame, который будет реализовывать логику игры. Данный класс должен
быть унаследован от класса Game, который является частью крутого &quot;игрового движка&quot; JavaRush.
Этот и другие классы &quot;движка&quot; находятся в пакете com.javarush.engine.cell, и чтобы ими пользоваться,
класс MinesweeperGame должен содержать такой импорт:
import com.javarush.engine.cell.*;
Если ты все сделал правильно, после запуска приложения увидишь игровое поле.



