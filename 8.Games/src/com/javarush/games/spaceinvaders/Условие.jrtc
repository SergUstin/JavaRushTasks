taskKey="com.javarush.games.spaceinvaders.part15"\n\nИгра Space Invaders (15/34)

Все вражеские пули будем хранить в переменной enemyBullets класса SpaceInvadersGame. Добавим их отрисовку
и движение в соответствующие методы. Чтобы удалить потраченные пули, создадим и реализуем
метод removeDeadBullets() в классе SpaceInvadersGame. Для удаления можно либо использовать итератор, либо создать копию списка enemyBullets
и проходить по ней циклом. Если в результате проверки объект нужно удалить из списка, вызываем enemyBullets.remove(bullet).
К потраченным пулям относятся те, которые вылетели за пределы экрана, и те, которые попали в цель (isAlive == false).
Добавим вспомогательный метод check(). На данном этапе он будет вызывать метод removeDeadBullets(). Впоследствии в нем
будут происходить различные проверки на каждом шаге игры.
С такой же частотой мы будем вызывать метод fire() у флота, при котором один из вражеских кораблей может выстрелить.
Если выстрел произошел, метод вернет пулю, которую нужно добавить в список.


Требования:
1.	В классе SpaceInvadersGame должно существовать приватное поле enemyBullets типа List&lt;Bullet&gt;.
2.	Поле enemyBullets должно быть проинициализировано в методе createGame() новым объектом типа ArrayList&lt;Bullet&gt; до вызова метода drawScene().
3.	В методе drawScene() после вызова метода drawField() у каждого объекта из списка enemyBullets должен быть вызван метод draw(Game). В качестве параметра передай в метод &quot;this&quot;.
4.	В методе moveSpaceObjects() у каждого объекта из списка enemyBullets должен быть вызван метод метод move().
5.	В классе SpaceInvadersGame должен существовать приватный метод void removeDeadBullets().
6.	В методе removeDeadBullets() необходимо из списка enemyBullets удалить все &quot;неживые&quot; пули и те, которые вылетели за пределы экрана (координата y пули больше либо равна HEIGHT - 1).
7.	В классе SpaceInvadersGame должен существовать приватный метод void check().
8.	В методе check() необходимо вызвать метод removeDeadBullets().
9.	В методе onTurn(int) класса SpaceInvadersGame необходимо вызвать метод check() до вызова метода drawScene().
10.	В методе onTurn(int) необходимо один раз вызвать у объекта enemyFleet метод fire(Game) с параметром &quot;this&quot; до вызова метода drawScene().
11.	Если результат вызова метода fire(Game) у объекта enemyFleet вернул не null, необходимо в список enemyBullets добавить этот результат. Добавление выполняется до вызова метода drawScene().


Игра Space Invaders (15/34)

Создадим и реализуем метод fire у EnemyFleet. Этот метод будет вызывать метод fire у одного из кораблей флота, выбранного случайно.
Кроме того, флот будет стрелять с вероятностью COMPLEXITY процентов.



Игра Space Invaders (15/34)

Введем переменную COMPLEXITY, которая отвечает за сложность игры, а именно &mdash; за вероятность выстрела
вражеского корабля за один шаг игры. Все корабли должны стрелять, поэтому в класс Ship добавим метод fire. Так как экземпляр
этого класса мы не будем создавать, сделаем этот метод &quot;заглушкой&quot;, а реализовывать его будем в
классах-наследниках. Чтобы пуля вылетала из носовой пушки, нужно передать в конструктор правильные координаты.



Игра Space Invaders (15/34)

Создадим класс Bullet, отвечающий за пули. Конструктор этого класса будет принимать координаты x, y и направление полета.
Также в конструкторе будет вызываться метод setMatrix с параметром матрицы пули(ShapeMatrix.BULLET),
которую ты найдешь в классе ShapeMatrix. Так как пули летают только вверх или вниз, при их движении меняется
только координата y. Введем переменную dy, которая будет отвечать за величину изменения координаты y. При движении вверх
dy имеет отрицательное значение, а при движении вниз &mdash; положительное. Поэтому в методе move, будет достаточно
увеличить координату y на dy.
Объявим переменную isAlive, которая будет показывать, &quot;жива&quot; пуля или нет.
При создании она &quot;жива&quot;, а при столкновении с кораблем противника, она &quot;умирает&quot;.
Это поведение мы реализуем позже.



Игра Space Invaders (15/34)

Когда корабли подлетают к краю экрана, они меняют направление на противоположное и опускаются ниже.
Для этого нам нужно реализовать метод move класса EnemyFleet.



Игра Space Invaders (15/34)

Согласно концепции игры, чем меньше кораблей, тем выше скорость их движения по горизонтали.
Реализуем эту зависимость в методе getSpeed. Обрати внимание, что максимальная скорость вражеских кораблей
не должна превышать значение 2. Также добавим в класс EnemyFleet направление движения и метод move.
В классе SpaceInvadersGame нам понадобится метод moveSpaceObjects, в котором будем двигать объекты.
Корабли передвигаются на каждом такте игры, поэтому метод moveSpaceObjects нужно вызывать в методе
onTurn. Чтобы сразу увидеть результат движения на экране, нужно вызвать метод moveSpaceObjects до перерисовки экрана.



