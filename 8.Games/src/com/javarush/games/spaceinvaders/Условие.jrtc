taskKey="com.javarush.games.spaceinvaders.part12"\n\nИгра Space Invaders (12/34)

Создадим класс Bullet, отвечающий за пули. Конструктор этого класса будет принимать координаты x, y и направление полета.
Также в конструкторе будет вызываться метод setMatrix с параметром матрицы пули(ShapeMatrix.BULLET),
которую ты найдешь в классе ShapeMatrix. Так как пули летают только вверх или вниз, при их движении меняется
только координата y. Введем переменную dy, которая будет отвечать за величину изменения координаты y. При движении вверх
dy имеет отрицательное значение, а при движении вниз &mdash; положительное. Поэтому в методе move, будет достаточно
увеличить координату y на dy.
Объявим переменную isAlive, которая будет показывать, &quot;жива&quot; пуля или нет.
При создании она &quot;жива&quot;, а при столкновении с кораблем противника, она &quot;умирает&quot;.
Это поведение мы реализуем позже.


Требования:
1.	В пакете gameobjects в отдельном файле должен существовать публичный класс Bullet.
2.	Класс Bullet должен быть наследником класса GameObject.
3.	В классе Bullet должно существовать приватное поле dy типа int.
4.	В классе Bullet должен существовать публичный конструктор с тремя параметрами (double x, double y, Direction direction), который вызывает конструктор базового класса с параметрами x и y.
5.	В классе Bullet должно существовать публичное поле isAlive типа boolean, инициализированное при объявлении значением true.
6.	В конструкторе класса Bullet необходимо вызвать метод setMatrix(int[][]) базового класса. В качестве параметра передай в метод ShapeMatrix.BULLET.
7.	В конструкторе класса Bullet необходимо инициализировать поле dy значением -1, если параметр конструктора direction равен Direction.UP.
8.	В конструкторе класса Bullet необходимо инициализировать поле dy значением 1, если параметр конструктора direction не равен Direction.UP.
9.	В классе Bullet должен существовать публичный метод void move().
10.	В методе move() значение поля y необходимо увеличить на значение поля dy.


Игра Space Invaders (12/34)

Когда корабли подлетают к краю экрана, они меняют направление на противоположное и опускаются ниже.
Для этого нам нужно реализовать метод move класса EnemyFleet.



Игра Space Invaders (12/34)

Согласно концепции игры, чем меньше кораблей, тем выше скорость их движения по горизонтали.
Реализуем эту зависимость в методе getSpeed. Обрати внимание, что максимальная скорость вражеских кораблей
не должна превышать значение 2. Также добавим в класс EnemyFleet направление движения и метод move.
В классе SpaceInvadersGame нам понадобится метод moveSpaceObjects, в котором будем двигать объекты.
Корабли передвигаются на каждом такте игры, поэтому метод moveSpaceObjects нужно вызывать в методе
onTurn. Чтобы сразу увидеть результат движения на экране, нужно вызвать метод moveSpaceObjects до перерисовки экрана.



Игра Space Invaders (12/34)

В игре будет все двигаться, а значит, нам нужно определять направление движения объектов. Хранить направления удобно
в enum&#39;е. Движение вражеского корабля опишем в методе move. В зависимости от направления и скорости, он меняет
соответствующую координату. У движения вниз скорость постоянная &mdash; 2. Поскольку вражеский флот движется от одного края
игрового поля к другому, нам нужно контролировать достижение флотом боковых границ.



Игра Space Invaders (12/34)

Продолжим работу над созданием вражеского флота. Для этого в методе createShips заполним список ships. Учтем, что
оптимальным расстоянием от верхней границы экрана до первого сверху ряда кораблей будет 12 ячеек.
Для добавления вражеского флота в игру создадим поле enemyFleet в классе SpaceInvadersGame и проинициализируем
его новым объектом типа EnemyFleet. Вражеские корабли создаются при вызове метода createShips в конструкторе объекта EnemyFleet
Так как игра динамическая, нам нужно периодически перерисовывать
экран и выполнять другие действия. Все, что будет происходить на каждом шаге, выполняется в методе onTurn(int).
Чтобы задать частоту работы этого метода, мы будем использовать метод setTurnTimer. Он принимает на вход параметр &mdash;
длительность каждого шага в миллисекундах. Т.е. при значении шага в 40 мс (0,04с) мы получим частоту работы метода onTurn,
равную 25 разам в секунду (1/0,04с). Если все сделал правильно, запустив программу, ты увидишь вражеский флот.



Игра Space Invaders (12/34)

В этой части мы подготовим основу для вражеского флота. Для этого создадим класс EnemyFleet. Он будет хранить
список кораблей, количество рядов кораблей(ROWS_COUNT), количество кораблей в ряду(COLUMNS_COUNT) и расстояние между
левыми верхними углами соседних кораблей(STEP). Создавать корабли и заполнять ими список(ships) мы будем в методе createShips,
но к его реализации приступим позже.



