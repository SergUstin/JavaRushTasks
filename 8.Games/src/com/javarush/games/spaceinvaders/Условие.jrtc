taskKey="com.javarush.games.spaceinvaders.part14"\n\nИгра Space Invaders (14/34)

Создадим и реализуем метод fire у EnemyFleet. Этот метод будет вызывать метод fire у одного из кораблей флота, выбранного случайно.
Кроме того, флот будет стрелять с вероятностью COMPLEXITY процентов.


Требования:
1.	В классе EnemyFleet должен существовать публичный метод Bullet fire(Game).
2.	Метод fire(Game) класса EnemyFleet должен возвращать null, если в списке ships нет вражеских кораблей.
3.	Метод fire(Game) класса EnemyFleet должен вызывать метод getRandomNumber(int) у объекта типа Game с параметром (100 / SpaceInvadersGame.COMPLEXITY).
4.	В методе fire(Game) класса EnemyFleet необходимо вернуть null, если результат вызова метода getRandomNumber(int) у объекта типа Game с параметром (100 / SpaceInvadersGame.COMPLEXITY) больше нуля.
5.	Метод fire(Game) класса EnemyFleet должен вызывать метод getRandomNumber(int) у объекта типа Game с параметром, равным количеству вражеских кораблей в списке ships.
6.	Метод fire(Game) класса EnemyFleet должен вызывать у корабля из списка ships c индексом, равным результату вызова game.getRandomNumber(ships.size()), метод fire().
7.	Метод fire(Game) класса EnemyFleet должен возвращать результат вызова метода fire() у вражеского корабля.


Игра Space Invaders (14/34)

Введем переменную COMPLEXITY, которая отвечает за сложность игры, а именно &mdash; за вероятность выстрела
вражеского корабля за один шаг игры. Все корабли должны стрелять, поэтому в класс Ship добавим метод fire. Так как экземпляр
этого класса мы не будем создавать, сделаем этот метод &quot;заглушкой&quot;, а реализовывать его будем в
классах-наследниках. Чтобы пуля вылетала из носовой пушки, нужно передать в конструктор правильные координаты.



Игра Space Invaders (14/34)

Создадим класс Bullet, отвечающий за пули. Конструктор этого класса будет принимать координаты x, y и направление полета.
Также в конструкторе будет вызываться метод setMatrix с параметром матрицы пули(ShapeMatrix.BULLET),
которую ты найдешь в классе ShapeMatrix. Так как пули летают только вверх или вниз, при их движении меняется
только координата y. Введем переменную dy, которая будет отвечать за величину изменения координаты y. При движении вверх
dy имеет отрицательное значение, а при движении вниз &mdash; положительное. Поэтому в методе move, будет достаточно
увеличить координату y на dy.
Объявим переменную isAlive, которая будет показывать, &quot;жива&quot; пуля или нет.
При создании она &quot;жива&quot;, а при столкновении с кораблем противника, она &quot;умирает&quot;.
Это поведение мы реализуем позже.



Игра Space Invaders (14/34)

Когда корабли подлетают к краю экрана, они меняют направление на противоположное и опускаются ниже.
Для этого нам нужно реализовать метод move класса EnemyFleet.



Игра Space Invaders (14/34)

Согласно концепции игры, чем меньше кораблей, тем выше скорость их движения по горизонтали.
Реализуем эту зависимость в методе getSpeed. Обрати внимание, что максимальная скорость вражеских кораблей
не должна превышать значение 2. Также добавим в класс EnemyFleet направление движения и метод move.
В классе SpaceInvadersGame нам понадобится метод moveSpaceObjects, в котором будем двигать объекты.
Корабли передвигаются на каждом такте игры, поэтому метод moveSpaceObjects нужно вызывать в методе
onTurn. Чтобы сразу увидеть результат движения на экране, нужно вызвать метод moveSpaceObjects до перерисовки экрана.



Игра Space Invaders (14/34)

В игре будет все двигаться, а значит, нам нужно определять направление движения объектов. Хранить направления удобно
в enum&#39;е. Движение вражеского корабля опишем в методе move. В зависимости от направления и скорости, он меняет
соответствующую координату. У движения вниз скорость постоянная &mdash; 2. Поскольку вражеский флот движется от одного края
игрового поля к другому, нам нужно контролировать достижение флотом боковых границ.



