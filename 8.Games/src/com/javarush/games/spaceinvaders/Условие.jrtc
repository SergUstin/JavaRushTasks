taskKey="com.javarush.games.spaceinvaders.part17"\n\nИгра Space Invaders (17/34)

Добавим в класс PlayerShip метод, который проверяет, попали ли вражеские пули в корабль игрока (метод isCollision класса GameObject).
Если было попадание, он &quot;убивает&quot; корабль и пулю. Также добавим корабль игрока в класс игры, отрисуем его и внесем проверку попаданий в соответствующий метод.


Требования:
1.	В классе PlayerShip должен существовать публичный метод void verifyHit(List&lt;Bullet&gt; bullets).
2.	Метод verifyHit(List&lt;Bullet&gt; bullets) не должен ничего делать, если в списке bullets отсутствуют пули (список пустой).
3.	В методе verifyHit(List&lt;Bullet&gt; bullets), если игрок жив, необходимо проверить пересечение игрока с каждой из живых пуль из списка bullets (используй метод isCollision(GameObject)).
4.	Если результат проверки вернул true, необходимо вызвать метод kill().
5.	Если результат проверки вернул true, необходимо вызвать метод kill() у пули, с которой произошло пересечение.
6.	В классе SpaceInvadersGame должно существовать приватное поле playerShip типа PlayerShip.
7.	Поле playerShip должно быть проинициализировано в методе createGame() новым объектом типа PlayerShip до вызова метода drawScene().
8.	В методе drawScene() после вызова метода drawField() у объекта playerShip должен быть вызван метод draw(Game). В качестве параметра передай в метод &quot;this&quot;.
9.	В методе check() класса SpaceInvadersGame у объекта playerShip необходимо вызвать метод verifyHit(List&lt;Bullet&gt;) с параметром enemyBullets, до вызова метода removeDeadBullets().


Игра Space Invaders (17/34)

Теперь создадим корабль игрока. Для этого нам нужен класс PlayerShip. В его конструкторе
будем устанавливать значения координат таким образом, чтобы корабль отображался внизу экрана по центру.
Кроме этого, конструктор задает внешний вид корабля, устанавливая матрицу PLAYER, которую
мы тебе прислали в классе ShapeMatrix. У корабля может быть два состояния: &quot;живой&quot; или &quot;неживой&quot;
Чтобы описать эти состояния, добавим поле isAlive в общий класс кораблей Ship. Когда пуля попадает в корабль,
они (пуля и корабль) уничтожаются, поэтому добавим метод kill. При его вызове будем &quot;убивать&quot;
корабль и пулю.



Игра Space Invaders (17/34)

Все вражеские пули будем хранить в переменной enemyBullets класса SpaceInvadersGame. Добавим их отрисовку
и движение в соответствующие методы. Чтобы удалить потраченные пули, создадим и реализуем
метод removeDeadBullets() в классе SpaceInvadersGame. Для удаления можно либо использовать итератор, либо создать копию списка enemyBullets
и проходить по ней циклом. Если в результате проверки объект нужно удалить из списка, вызываем enemyBullets.remove(bullet).
К потраченным пулям относятся те, которые вылетели за пределы экрана, и те, которые попали в цель (isAlive == false).
Добавим вспомогательный метод check(). На данном этапе он будет вызывать метод removeDeadBullets(). Впоследствии в нем
будут происходить различные проверки на каждом шаге игры.
С такой же частотой мы будем вызывать метод fire() у флота, при котором один из вражеских кораблей может выстрелить.
Если выстрел произошел, метод вернет пулю, которую нужно добавить в список.



Игра Space Invaders (17/34)

Создадим и реализуем метод fire у EnemyFleet. Этот метод будет вызывать метод fire у одного из кораблей флота, выбранного случайно.
Кроме того, флот будет стрелять с вероятностью COMPLEXITY процентов.



Игра Space Invaders (17/34)

Введем переменную COMPLEXITY, которая отвечает за сложность игры, а именно &mdash; за вероятность выстрела
вражеского корабля за один шаг игры. Все корабли должны стрелять, поэтому в класс Ship добавим метод fire. Так как экземпляр
этого класса мы не будем создавать, сделаем этот метод &quot;заглушкой&quot;, а реализовывать его будем в
классах-наследниках. Чтобы пуля вылетала из носовой пушки, нужно передать в конструктор правильные координаты.



Игра Space Invaders (17/34)

Создадим класс Bullet, отвечающий за пули. Конструктор этого класса будет принимать координаты x, y и направление полета.
Также в конструкторе будет вызываться метод setMatrix с параметром матрицы пули(ShapeMatrix.BULLET),
которую ты найдешь в классе ShapeMatrix. Так как пули летают только вверх или вниз, при их движении меняется
только координата y. Введем переменную dy, которая будет отвечать за величину изменения координаты y. При движении вверх
dy имеет отрицательное значение, а при движении вниз &mdash; положительное. Поэтому в методе move, будет достаточно
увеличить координату y на dy.
Объявим переменную isAlive, которая будет показывать, &quot;жива&quot; пуля или нет.
При создании она &quot;жива&quot;, а при столкновении с кораблем противника, она &quot;умирает&quot;.
Это поведение мы реализуем позже.



