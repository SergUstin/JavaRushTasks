taskKey="com.javarush.games.spaceinvaders.part27"\n\nИгра Space Invaders (27/34)

Переопределим метод уничтожения для вражеского корабля. Он устанавливает значение false полю isAlive
и задает матрицы для анимации уничтожения. Также создадим в классе Ship метод isVisible().
Он будет возвращать false после того, как у &quot;неживого&quot; корабля отобразится вся анимация.


Требования:
1.	В классе EnemyShip должен быть переопределен метод kill() родительского класса Ship.
2.	Метод kill() не должен ничего делать, если корабль &quot;неживой&quot;.
3.	Метод kill() должен устанавливать полю isAlive значение false.
4.	В методе kill() необходимо вызвать метод базового класса setAnimatedView(int[][]...) с параметрами: ShapeMatrix.KILL_ENEMY_ANIMATION_FIRST, ShapeMatrix.KILL_ENEMY_ANIMATION_SECOND, ShapeMatrix.KILL_ENEMY_ANIMATION_THIRD.
5.	В классе Ship должен существовать публичный метод boolean isVisible().
6.	Метод isVisible() должен возвращать false, если корабль &quot;неживой&quot; И frameIndex больше либо равно количеству объектов в списке frames. Иначе &mdash; true.


Игра Space Invaders (27/34)

В этой части добавим возможность стрелять по нажатию клавиши пробел. Новосозданные пули игрока добавляются
в список playerBullets, а те, которые вылетают за пределы игрового поля, удаляются из него.
Для удаления можно либо использовать итератор, либо создать копию списка playerBullets
и проходить по ней циклом. Если в результате проверки объект нужно удалить из списка &mdash; вызывать playerBullets.remove(bullet).
Также ограничим максимальное количество пуль игрока на экране, чтобы немного усложнить игру. Для удобства вынесем
это количество в переменную. Переопределим метод setCellValueEx класса Game так, чтобы он работал только
с валидными координатами.



Игра Space Invaders (27/34)

Сейчас подготовим возможность стрельбы для игрока. Для этого нам нужен метод fire, который будет создавать пули. Хранить их
будем в списке playerBullets. Добавь отрисовку пуль в метод drawScene, а их движение &mdash; в метод moveSpaceObjects.
Осталось только реализовать выстрел по нажатию клавиши. Этим мы займемся в следующей части.



Игра Space Invaders (27/34)

Когда ты отпускаешь клавиши влево или вправо, корабль игрока не прекращает движение, пока не дойдет до края
игрового поля. Давай это исправим. Переопределим метод onKeyReleased(Key) класса Game. Этот метод вызывается при
отпускании клавиш. Если корабль игрока движется, в результате работы метода onKeyReleased(Key) состояние поля direction
у игрока изменится на Direction.UP и, как следствие, корабль прекратит движение.



Игра Space Invaders (27/34)

В этой части реализуем движение корабля игрока. Учти, что корабль не должен выходить
за пределы игрового поля. Чтобы корабль двигался вместе со всеми остальными объектами, необходимо вызывать метод
move() в методе moveSpaceObjects() главного класса игры.



Игра Space Invaders (27/34)

Добавим новое свойство кораблю игрока &mdash; направление движения. Задавать его будем через сеттер. Корабль может
двигаться в двух направлениях &mdash; влево или вправо. Но поскольку он может совсем не двигаться, для этого состояния
будем использовать направление &quot;вверх&quot;. Так как при старте корабль не двигается, установим
направление &quot;вверх&quot; по умолчанию.
Для считывания команд игрока (нажатия клавиш) переопределим метод onKeyPress(Key) класса Game. Этот метод будет
устанавливать соответствующее направление кораблю при нажатии клавиши влево или вправо. Кроме этого реализуем
перезапуск остановленной игры по нажатию клавиши пробел.



