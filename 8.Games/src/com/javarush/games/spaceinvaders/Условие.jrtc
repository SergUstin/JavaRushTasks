taskKey="com.javarush.games.spaceinvaders.part08"\n\nИгра Space Invaders (8/34)

Продолжим работу над созданием вражеского флота. Для этого в методе createShips заполним список ships. Учтем, что
оптимальным расстоянием от верхней границы экрана до первого сверху ряда кораблей будет 12 ячеек.
Для добавления вражеского флота в игру создадим поле enemyFleet в классе SpaceInvadersGame и проинициализируем
его новым объектом типа EnemyFleet. Вражеские корабли создаются при вызове метода createShips в конструкторе объекта EnemyFleet
Так как игра динамическая, нам нужно периодически перерисовывать
экран и выполнять другие действия. Все, что будет происходить на каждом шаге, выполняется в методе onTurn(int).
Чтобы задать частоту работы этого метода, мы будем использовать метод setTurnTimer. Он принимает на вход параметр &mdash;
длительность каждого шага в миллисекундах. Т.е. при значении шага в 40 мс (0,04с) мы получим частоту работы метода onTurn,
равную 25 разам в секунду (1/0,04с). Если все сделал правильно, запустив программу, ты увидишь вражеский флот.


Требования:
1.	В методе createShips() класса EnemyFleet необходимо создать и добавить в список ships ROWS_COUNT * COLUMNS_COUNT новых вражеских кораблей.
2.	Каждый вражеский корабль необходимо создавать с параметрами конструктора: x * STEP, y * STEP + 12, где x &mdash; переменная цикла от 0 включительно до COLUMNS_COUNT не включительно; y &mdash; переменная цикла от 0 включительно до ROWS_COUNT не включительно.
3.	В классе EnemyFleet должен существовать один публичный конструктор без параметров.
4.	В конструкторе класса EnemyFleet необходимо вызвать метод createShips().
5.	В классе EnemyFleet должен существовать публичный метод void draw(Game game).
6.	В методе draw(Game game) у каждого вражеского корабля из списка ships необходимо вызвать метод draw(Game). В качестве параметра передай game.
7.	В классе SpaceInvadersGame должно существовать приватное поле enemyFleet типа EnemyFleet.
8.	Поле enemyFleet должно быть проинициализировано в методе createGame() новым объектом типа EnemyFleet до вызова метода drawScene().
9.	В методе drawScene() после вызова метода drawField() у объекта enemyFleet должен быть вызван метод draw(Game). В качестве параметра передай в метод &quot;this&quot;.
10.	В классе SpaceInvadersGame должен быть переопределен метод onTurn(int) родительского класса Game.
11.	В методе onTurn(int) должен быть вызван метод drawScene().
12.	В методе createGame() класса SpaceInvadersGame должен быть вызван метод setTurnTimer(int) класса Game с параметром 40.
13.	В классе EnemyFleet должен быть импорт класса com.javarush.engine.cell.Game.


Игра Space Invaders (8/34)

В этой части мы подготовим основу для вражеского флота. Для этого создадим класс EnemyFleet. Он будет хранить
список кораблей, количество рядов кораблей(ROWS_COUNT), количество кораблей в ряду(COLUMNS_COUNT) и расстояние между
левыми верхними углами соседних кораблей(STEP). Создавать корабли и заполнять ими список(ships) мы будем в методе createShips,
но к его реализации приступим позже.



Игра Space Invaders (8/34)

Сейчас мы создадим класс Ship, который будет хранить в себе общие свойства космических кораблей. В нем будет
метод setStaticView, который на данный момент устанавливает матрицу, а позже будет еще и задавать анимацию.
Первым сделаем корабль представителя вражеского флота EnemyShip. Его матрицу мы прислали тебе в классе
ShapeMatrix.



Игра Space Invaders (8/34)

Кроме звезд в игре буду задействованы другие игровые объекты, а именно &mdash; космические корабли.
Внешний вид игрового объекта на плоскости задается в виде матрицы matrix, поэтому добавим поле matrix в
классе GameObject. Кроме формы объекта, матрица содержит порядковый номер цвета из списка цветов
com.javarush.engine.cell.Color. Габаритные размеры объекта вынесем в отдельные поля &mdash; ширину и высоту.
Чтобы отобразить игровой объект на экране, создадим и реализуем метод draw(Game game). В этом методе для
каждой ячейки матрицы matrix будем вызывать метод setCellValueEx(int x, int y, Color color, String text) у
объекта типа Game, который получаем в качестве параметра.
Для отрисовки элементов матрицы matrix на игровом поле необходимо учитывать, что координаты x и y объекта класса
GameObject &mdash; это координаты левой верхней ячейки матрицы matrix на игровом поле.
Пример:
/api/1.0/rest/images/13414/b23b98bd-d303-41ed-a93c-c784236acee4

Как видно из примера, левая верхняя ячейка матрицы игрового объекта имеет координаты на игровом поле x = 2 и y = 4,
но относительно своей матрицы - это координаты x = 0 и y = 0. Исходя из этого, в метод setCellValueEx будут
передаваться координаты верхней левой ячейки матрицы игрового объекта на игровом поле + координаты ячейки в
матрице игрового объекта (x = 2 + 0, y = 4 + 0).
Пример:
game.setCellValueEx(x объекта на игровом поле + x в матрице, y объекта на игровом поле + y в матрице, цвет, пустая строка);

Обрати внимание, что color &mdash; это цвет элемента из матрицы объекта, который можно получить так:
Color.values()[matrix[i][j]], где
i &ndash; координата y в матрице matrix,
j &ndash; координата x в матрице matrix.



Игра Space Invaders (8/34)

Для отображения звезды можно использовать любой символ из стандарта Юникод. Его будем хранить в поле STAR_SIGN
класса Star. Чтобы отображать звезду на игровом поле, создадим метод draw(Game). В нем будем вызывать метод
setCellValueEx у объекта типа Game, который получаем в качестве параметра. В метод setCellValueEx передадим
координаты звезды, цвет фона, символ звезды, цвет и размер этого символа. Обрати внимание, что у звезды
тип координат x и y &mdash; double, поэтому при вызове метода setCellValueEx их нужно привести к типу int.
Чтобы добавить звезды в игру, создадим для них список и метод, который будет заполнять этот список новыми звездами.
А для отображения звезд на игровом поле, нужно вызвать метод отрисовки draw(Game) у каждой звезды после
отрисовки игрового поля.



Игра Space Invaders (8/34)

Давай реализуем метод drawField() &mdash; закрасим игровое поле одним цветом.
Для этого нужно каждой ячейке установить цвет и пустую строку. В этом нам поможет метод
setCellValueEx(int, int, Color, String) класса Game, где первые 2 параметра - координаты x и y ячейки,
третий - цвет фона, а последний - значение ячейки, которое должно отображаться на игровом поле.
Список доступных цветов ты найдешь в enum com.javarush.engine.cell.Color игрового движка.
Значение ячейки устанавливать не нужно, поэтому передадим пустую строку.
Например, чтобы раскрасить ячейку с координатами x = 0 и y = 2 в черный цвет, нужно вызвать метод:
setCellValueEx(0, 2, Color.BLACK, &quot;&quot;).
Чтобы закрасить не одну ячейку, а все - нам нужно взять каждую строку (по одной) игрового поля,
пройтись по каждой ячейке строки и установить ей цвет и значение.
В этом нам помогут циклы. Пример:
for (int y = 0; y &lt; &quot;высота игрового поля&quot;; y++) {
for (int x = 0; x &lt; &quot;ширина игрового поля&quot;; x++) {
setCellValueEx(x, y, Color.BLACK, &quot;&quot;);
}
}

Поскольку в игре будут задействованы разные игровые объекты, их общие характеристики, такие как
координаты положения на игровом поле, будут описаны в родительском классе GameObject. Для классов
всех игровых объектов создадим отдельный пакет gameobjects.

Первыми игровыми объектами будут звезды. Для их описания создадим класс Star в пакете gameobjects и
унаследуем его от класса GameObject.



