taskKey="com.javarush.games.spaceinvaders.part09"\n\nИгра Space Invaders (9/34)

В игре будет все двигаться, а значит, нам нужно определять направление движения объектов. Хранить направления удобно
в enum&#39;е. Движение вражеского корабля опишем в методе move. В зависимости от направления и скорости, он меняет
соответствующую координату. У движения вниз скорость постоянная &mdash; 2. Поскольку вражеский флот движется от одного края
игрового поля к другому, нам нужно контролировать достижение флотом боковых границ.


Требования:
1.	В отдельном файле должен существовать публичный enum Direction со значениями: RIGHT, LEFT, UP, DOWN.
2.	В классе EnemyShip должен существовать публичный метод void move(Direction direction, double speed).
3.	В методе move(Direction direction, double speed) необходимо увеличить значение поля x на speed, если direction равно Direction.RIGHT.
4.	В методе move(Direction direction, double speed) необходимо уменьшить значение поля x на speed, если direction равно Direction.LEFT.
5.	В методе move(Direction direction, double speed) необходимо увеличить значение поля y на 2, если direction равно Direction.DOWN.
6.	В классе EnemyFleet должен существовать приватный метод double getLeftBorder().
7.	Метод getLeftBorder() должен возвращать минимальную координату x среди всех вражеских кораблей из списка ships.
8.	В классе EnemyFleet должен существовать приватный метод double getRightBorder().
9.	Метод getRightBorder() должен возвращать максимальное из значений (x + width) среди всех вражеских кораблей из списка ships.


Игра Space Invaders (9/34)

Продолжим работу над созданием вражеского флота. Для этого в методе createShips заполним список ships. Учтем, что
оптимальным расстоянием от верхней границы экрана до первого сверху ряда кораблей будет 12 ячеек.
Для добавления вражеского флота в игру создадим поле enemyFleet в классе SpaceInvadersGame и проинициализируем
его новым объектом типа EnemyFleet. Вражеские корабли создаются при вызове метода createShips в конструкторе объекта EnemyFleet
Так как игра динамическая, нам нужно периодически перерисовывать
экран и выполнять другие действия. Все, что будет происходить на каждом шаге, выполняется в методе onTurn(int).
Чтобы задать частоту работы этого метода, мы будем использовать метод setTurnTimer. Он принимает на вход параметр &mdash;
длительность каждого шага в миллисекундах. Т.е. при значении шага в 40 мс (0,04с) мы получим частоту работы метода onTurn,
равную 25 разам в секунду (1/0,04с). Если все сделал правильно, запустив программу, ты увидишь вражеский флот.



Игра Space Invaders (9/34)

В этой части мы подготовим основу для вражеского флота. Для этого создадим класс EnemyFleet. Он будет хранить
список кораблей, количество рядов кораблей(ROWS_COUNT), количество кораблей в ряду(COLUMNS_COUNT) и расстояние между
левыми верхними углами соседних кораблей(STEP). Создавать корабли и заполнять ими список(ships) мы будем в методе createShips,
но к его реализации приступим позже.



Игра Space Invaders (9/34)

Сейчас мы создадим класс Ship, который будет хранить в себе общие свойства космических кораблей. В нем будет
метод setStaticView, который на данный момент устанавливает матрицу, а позже будет еще и задавать анимацию.
Первым сделаем корабль представителя вражеского флота EnemyShip. Его матрицу мы прислали тебе в классе
ShapeMatrix.



Игра Space Invaders (9/34)

Кроме звезд в игре буду задействованы другие игровые объекты, а именно &mdash; космические корабли.
Внешний вид игрового объекта на плоскости задается в виде матрицы matrix, поэтому добавим поле matrix в
классе GameObject. Кроме формы объекта, матрица содержит порядковый номер цвета из списка цветов
com.javarush.engine.cell.Color. Габаритные размеры объекта вынесем в отдельные поля &mdash; ширину и высоту.
Чтобы отобразить игровой объект на экране, создадим и реализуем метод draw(Game game). В этом методе для
каждой ячейки матрицы matrix будем вызывать метод setCellValueEx(int x, int y, Color color, String text) у
объекта типа Game, который получаем в качестве параметра.
Для отрисовки элементов матрицы matrix на игровом поле необходимо учитывать, что координаты x и y объекта класса
GameObject &mdash; это координаты левой верхней ячейки матрицы matrix на игровом поле.
Пример:
/api/1.0/rest/images/13414/b23b98bd-d303-41ed-a93c-c784236acee4

Как видно из примера, левая верхняя ячейка матрицы игрового объекта имеет координаты на игровом поле x = 2 и y = 4,
но относительно своей матрицы - это координаты x = 0 и y = 0. Исходя из этого, в метод setCellValueEx будут
передаваться координаты верхней левой ячейки матрицы игрового объекта на игровом поле + координаты ячейки в
матрице игрового объекта (x = 2 + 0, y = 4 + 0).
Пример:
game.setCellValueEx(x объекта на игровом поле + x в матрице, y объекта на игровом поле + y в матрице, цвет, пустая строка);

Обрати внимание, что color &mdash; это цвет элемента из матрицы объекта, который можно получить так:
Color.values()[matrix[i][j]], где
i &ndash; координата y в матрице matrix,
j &ndash; координата x в матрице matrix.



Игра Space Invaders (9/34)

Для отображения звезды можно использовать любой символ из стандарта Юникод. Его будем хранить в поле STAR_SIGN
класса Star. Чтобы отображать звезду на игровом поле, создадим метод draw(Game). В нем будем вызывать метод
setCellValueEx у объекта типа Game, который получаем в качестве параметра. В метод setCellValueEx передадим
координаты звезды, цвет фона, символ звезды, цвет и размер этого символа. Обрати внимание, что у звезды
тип координат x и y &mdash; double, поэтому при вызове метода setCellValueEx их нужно привести к типу int.
Чтобы добавить звезды в игру, создадим для них список и метод, который будет заполнять этот список новыми звездами.
А для отображения звезд на игровом поле, нужно вызвать метод отрисовки draw(Game) у каждой звезды после
отрисовки игрового поля.



