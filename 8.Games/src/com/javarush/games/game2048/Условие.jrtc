taskKey="com.javarush.games.game2048.part13"\n\nИгра 2048 (13/18)

Основная логика игры реализована, но не до конца. Исходя из правил и названия игры, она заканчивается
выигрышем, когда значение одной из плиток будет равно 2048.

Поиск максимального значения на игровом поле нужно вынести в отдельный метод int getMaxTileValue(), который будет
возвращать его. Проверку выигрыша можно делать где угодно. Например, в самом начале
метода createNewNumber(), перед добавлением нового значения в матрицу.

Когда найдена плитка со значением 2048, нужно сообщить игроку о выигрыше. Чтобы сделать это красиво, вызови
метод showMessageDialog(Color cellColor, String message, Color textColor, int textSize) класса Game.
Думаю, не нужно объяснять, что передавать в этот метод: названия параметров говорят сами за себя.

После победы текущая игра прекращается. В будущем нам пригодится некий флаг isGameStopped.
Если игра выиграна, он будет равен true.
Давай все вышеописанное (вывод сообщения о выигрыше, флаг остановки игры) вынесем в отдельный метод, который назовем win().


Требования:
1.	В классе Game2048 должен быть создан приватный метод int getMaxTileValue(). Метод должен возвращать максимальное значение в матрице gameField.
2.	В классе Game2048 должна быть создана приватная переменная boolean isGameStopped, инициализированная при объявлении значением false.
3.	В классе Game2048 должен быть создан приватный метод void win().
4.	В методе win() переменной isGameStopped должно быть присвоено значение true.
5.	В методе win() должен быть вызван метод showMessageDialog(Color, String, Color, int).
6.	В методе createNewNumber() должен быть вызван метод getMaxTileValue().
7.	В методе createNewNumber() должен быть вызван метод win(), если в матрице есть значение 2048.


Игра 2048 (13/18)

Теперь можно приступать к реализации методов moveRight(), moveUp(), moveDown().

В методе moveRight() повернем матрицу gameFiled два раза по часовой стрелке, затем вызовем moveLeft(),
который уже написан, и снова повернем gameField еще два раза по часовой стрелке. Должно сработать.

В методе moveDown() поворачиваем на 90 градусов один раз, затем вызываем moveLeft() и еще 3 раза поворачиваем на 90 градусов.

В методе moveUp() сначала поворачиваем на 90 градусов три раза, затем вызываем moveLeft() и еще один раз
поворачиваем на 90 градусов.



Игра 2048 (13/18)

Метод moveLeft() реализован, но есть еще 3. Предлагаем их реализовать таким способом: если нужно сдвинуть плитки
вниз, берем нашу матрицу gameField, поворачиваем ее на 90 градусов по часовой стрелке (низ становится слева),
сдвигаем влево и разворачиваем матрицу обратно (еще 3 раза поворачиваем матрицу на 90 градусов по часовой
стрелке). Остальные методы &mdash; аналогично.

Начнем с поворота матрицы gameField. Вот как примерно это должно выглядеть:
(2, 2, 2, 2), (0, 8, 4, 2),
(4, 4, 4, 4),  (0, 8, 4, 2),
(8, 8, 8, 8), (0, 8, 4, 2),
(0, 0, 0, 0), (0, 8, 4, 2)



Игра 2048 (13/18)

Какие методы вызывать по нажатию клавиш мы уже знаем. Поэтому приступим к их
реализации. Начнем с метода moveLeft().

В методе moveLeft() мы сдвигаем элементы каждой строки матрицы gameField
методом compressRow(int[]), после соединяем их значения с помощью метода mergeRow(int[]), а затем снова сдвигаем (так как после соединения могут
образоваться пустые промежутки).
В эти методы в качестве параметра должна поочередно передаваться каждая строка матрицы gameField.
Пример:
Начальная строка: {2, 2, 0, 2}
После compressRow(int[]): {2, 2, 2, 0}
После mergeRow(int[]): {4, 0, 2, 0}
После compressRow(int[]): {4, 2, 0, 0}

Если был хотя бы один сдвиг или соединение элементов, ход считается
совершенным, и мы добавляем в массив новое число &mdash; вызываем метод createNewNumber().

Чтобы это было видно на экране, в конце нужно вызвать наш метод рисования drawScene().



Игра 2048 (13/18)

Играть в игру можно используя клавиатуру, а именно &mdash; клавиши вверх, вниз, вправо, влево. По нажатию
определенной клавиши должно происходить соответствующее действие (сдвиг, слияние). Чтобы задать действие, необходимо
переопределить метод onKeyPress(Key key) класса Game, где параметром является нажатая клавиша клавиатуры.
В этом методе нужно сравнить полученный параметр key с четырьмя значениями направлений из enum Key и выполнить
соответствующее действие.

Например:
if (key == Key.LEFT) {
// выполнить движение влево
} else if (key == Key.RIGHT) {
// выполнить движение вправо
} и т.д.

Сами действия предлагаем вынести в соответствующие методы.
Например, движение влево &mdash; в метод moveLeft() и т.д. В итоге должно получиться 4 метода на 4 действия.



Игра 2048 (13/18)

Ты уже умеешь передвигать плитки по полю. Но это не все, что ты можешь делать в данной игре :)
Если при сдвиге две плитки с одинаковым значением &quot;налетают&quot; друг на друга, они соединяются в одну,
а ее значение равно сумме соединившихся плиток. Давай реализуем это.

Условия задачи:
Создай приватный метод boolean mergeRow(int[] row), который соединяет соседние пары одинаковых ненулевых элементов
массива row. Соединение должно происходить при сдвиге влево.

Если подряд стоят более двух одинаковых ненулевых элементов, соединяются сначала самые левые.
Соединенные элементы повторно не соединяются (в рамках текущего хода).

Метод должен возвращать true, если хотя бы один элемент массива был в нем изменен, иначе &mdash; false.

Примеры:
- Было (4, 4, 0, 0), стало (8, 0, 0, 0). Метод вернул true.
- Было (2, 2, 2, 2), стало (4, 0, 4, 0). Метод вернул true.
- Было (4, 2, 2, 0), стало (4, 4, 0, 0). Метод вернул true.
- Было (0, 2, 2, 0), стало (0, 4, 0, 0). Метод вернул true.
- Было (0, 2, 2, 2), стало (0, 4, 0, 2). Метод вернул true.
- Было (4, 0, 4, 0), стало (4, 0, 4, 0). Метод вернул false.



