taskKey="com.javarush.games.game2048.part07"\n\nИгра 2048 (7/18)

Исходя из правил игры, мы можем сдвинуть все плитки в одну из 4 сторон: вверх, вниз, вправо, влево.
При этом плитки со значением 2 и больше уходят в одну сторону (сторону сдвига), а пустые &mdash; в противоположную.

На данном этапе реализуем сдвиг влево. Для этого нам понадобится приватный метод boolean compressRow(int[] row), который сдвигает все
ненулевые элементы массива row влево (в сторону нулевого индекса), а нулевые элементы переносит вправо.
Если хотя бы один элемент был передвинут, метод возвращает true, иначе &ndash; false.

Примеры:
- Было (0, 2, 0, 2), стало (2, 2, 0, 0). Метод вернул true.
- Было (2, 2, 2, 2), стало (2, 2, 2, 2). Метод вернул false.
- Было (0, 4, 0, 2), стало (4, 2, 0, 0). Метод вернул true.
- Было (4, 2, 0, 2), стало (4, 2, 2, 0). Метод вернул true.
- Было (2, 4, 0, 0), стало (2, 4, 0, 0). Метод вернул false.


Требования:
1.	В классе Game2048 должен быть создан приватный метод boolean compressRow(int[] row).
2.	Метод compressRow(int[]) должен быть реализован в соответствии с условием задачи.
3.	Метод compressRow(int[]) должен возвращать true, если он внес изменения во входящий массив и false, если изменений не было.


Игра 2048 (7/18)

Уже намного лучше. Но, думаю, мы можем больше. Давай раскрасим клетки с одинаковыми значениями в одинаковые цвета.

Для этого напишем метод setCellColoredNumber, который будет принимать в качестве параметров координаты клетки
и ее значение, и :
- вычислять цвет клетки (используя метод getColorByValue, который описан ниже),
- отображать значение и цвет клетки на игровом поле.

Для вычисления цвета реализуем вспомогательный метод getColorByValue, который будет возвращать цвет в зависимости
от переданного в метод значения клетки. Например, если мы передаем в метод 2, то он возвращает Color.BLUE и т.п.
Цвета клеток для разных чисел должны быть разные, а для одинаковых - одинаковые.
Числа, которые могут находиться в матрице gameField: 0, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048.

Для отображения значения и цвета клетки с координатами x и y на игровом поле нам на помощь придет специальный метод
setCellValueEx(int x, int y, Color cellColor, String value) класса Game.
Воспользуйся им, чтобы изменить цвет и значение клетки одновременно.
Значение 0 на игровом поле отображать не нужно: вместо него мы видим пустую клетку. Поэтому для ячеек со значением 0
просто передай в метод setCellValueEx() пустую строку.

И последний штрих: в методе drawScene() замени вызов метода setCellColor() на setCellColoredNumber().

Примечания:
1. Для наглядности пустые клетки в примерах будут обозначены нулями.
2. Координаты матрицы должны соответствовать отображаемым координатам.

Пример:
Матрица: {
{2, 4, 8, 16},
{32, 64, 128, 256},
{512, 1024, 2048, 0},
{2, 4, 8, 16}
}
Соответствующее отображение:
!!!Картинка!!!!
Чтобы это реализовать, при установке значения игровому полю используй инвертированные координаты матрицы.
Например, для установки значения клетке с координатами (х, у) используй значение матрицы gameField[y][x].

Чтобы лучше понять, о чем идет речь, запусти отрисовку этой матрицы, сначала используя gameField[y][x], а затем &mdash; gameField[х][у].



Игра 2048 (7/18)

Согласно правилам, при запуске игры значения двух случайных клеток должны быть 2 либо 4 с вероятностью 90% и 10% соответственно.

Для выполнения этого условия, создай метод createNewNumber() и вызови его в методе createGame() 2 раза.
Метод createNewNumber():
1) случайным образом выбирает ячейку матрицы gameField со значением 0.
Подсказка: случайная ячейка - ячейка со случайными координатами. Для получения случайной координаты x нужно
использовать случайное число в диапазоне от 0 до SIZE. Это можно сделать с помощью вызова метода getRandomNumber(int)
с параметром SIDE. Для координаты y нужно сделать аналогично. После получения координат нужно проверить значение ячейки и,
если это значение не 0, то нужно повторять поиск случайной ячейки до тех пор, пока ее значение не будет равно 0;
2) случайным образом присваивает этой ячейке значение 2 (вероятность 90%) или 4 (вероятность 10%).
Подсказка: для этого используй метод getRandomNumber(int) с параметром 10:
метод getRandomNumber(10) возвращает случайное число в диапазоне от 0 до 9. Значит число 9 он вернет с вероятностью 10%.
- если getRandomNumber(10) вернет число 9, ячейке должно быть присвоено значение 4;
- если getRandomNumber(10) вернет число от 0 до 8, ячейке должно быть присвоено значение 2.



Игра 2048 (7/18)

Черный экран как-то не очень смотрится, согласись. Давай это изменим.

В классе Game, а теперь и в классе Game2048, т.к. он унаследован от Game, есть специальный метод
setCellColor(int x, int y, Color color), который красит ячейку с координатами x, y в цвет color.
Список доступных цветов ты найдешь в enum Color игрового движка.

Например, чтобы раскрасить ячейку с координатами 0,2 в красный цвет, нужно вызвать метод:
setCellColor(0, 2, Color.RED).

Создай метод drawScene() и в нем раскрась все клетки игрового поля в понравившийся цвет.



Игра 2048 (7/18)

Игровой движок мы будем использовать для отображения текущего состояния игры. А для хранения состояния отлично подойдет массив 4x4.

Поэтому создай поле int[][] gameField и инициализируй его при объявлении целочисленным массивом int[][] размером SIDEхSIDE.
По умолчанию ячейки целочисленного массива инициализируются нулями. Пускай ноль обозначает пустую клетку игрового поля.



Игра 2048 (7/18)

Пробовал запускать свою программу? Игровое поле маленькое. Давай это исправим. Для этого нужно
переопределить метод initialize() родительского класса Game. Метод initialize() служит для того, чтобы ты
сам мог задать размер игрового поля, решить, отображать сетку или нет и т.д.

Чтобы задать размер игрового поля в методе initialize(), вызови метод
setScreenSize(int width, int height) родительского класса Game, в который передай ширину и высоту
игрового поля. Как ты знаешь, размер игрового поля в нашей игре &mdash; 4х4 плитки. Предлагаем создать private
static final int переменную (константа) SIDE со значением 4 и передать ее как параметры в метод
setScreenSize(). Должно получиться что-то такое &mdash; setScreenSize(SIDE, SIDE). Можешь снова запустить свою
программу и посмотреть, что в итоге получилось.



