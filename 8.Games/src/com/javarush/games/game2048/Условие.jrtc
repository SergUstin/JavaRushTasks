taskKey="com.javarush.games.game2048.part10"\n\nИгра 2048 (10/18)

Какие методы вызывать по нажатию клавиш мы уже знаем. Поэтому приступим к их
реализации. Начнем с метода moveLeft().

В методе moveLeft() мы сдвигаем элементы каждой строки матрицы gameField
методом compressRow(int[]), после соединяем их значения с помощью метода mergeRow(int[]), а затем снова сдвигаем (так как после соединения могут
образоваться пустые промежутки).
В эти методы в качестве параметра должна поочередно передаваться каждая строка матрицы gameField.
Пример:
Начальная строка: {2, 2, 0, 2}
После compressRow(int[]): {2, 2, 2, 0}
После mergeRow(int[]): {4, 0, 2, 0}
После compressRow(int[]): {4, 2, 0, 0}

Если был хотя бы один сдвиг или соединение элементов, ход считается
совершенным, и мы добавляем в массив новое число &mdash; вызываем метод createNewNumber().

Чтобы это было видно на экране, в конце нужно вызвать наш метод рисования drawScene().


Требования:
1.	Метод moveLeft() должен перемещать и соединять элементы матрицы gameField влево в соответствии с правилами игры.
2.	Метод moveLeft() должен вызывать метод compressRow(int[]) как минимум по одному разу для каждой строки матрицы gameField.
3.	Метод moveLeft() должен вызывать метод mergeRow(int[]) ровно по одному разу для каждой строки матрицы gameField.
4.	Метод moveLeft() должен добавлять плитку с помощью метода createNewNumber(), если перемещение или соединение произошло.
5.	Метод moveLeft() не должен изменять содержимое матрицы gameField, если ни перемещение, ни соединение влево невозможны.
6.	Метод onKeyPress(Key) должен вызывать метод drawScene(), если была нажата клавиша движения (Key.UP, Key.RIGHT, Key.LEFT, Key.DOWN).


Игра 2048 (10/18)

Играть в игру можно используя клавиатуру, а именно &mdash; клавиши вверх, вниз, вправо, влево. По нажатию
определенной клавиши должно происходить соответствующее действие (сдвиг, слияние). Чтобы задать действие, необходимо
переопределить метод onKeyPress(Key key) класса Game, где параметром является нажатая клавиша клавиатуры.
В этом методе нужно сравнить полученный параметр key с четырьмя значениями направлений из enum Key и выполнить
соответствующее действие.

Например:
if (key == Key.LEFT) {
// выполнить движение влево
} else if (key == Key.RIGHT) {
// выполнить движение вправо
} и т.д.

Сами действия предлагаем вынести в соответствующие методы.
Например, движение влево &mdash; в метод moveLeft() и т.д. В итоге должно получиться 4 метода на 4 действия.



Игра 2048 (10/18)

Ты уже умеешь передвигать плитки по полю. Но это не все, что ты можешь делать в данной игре :)
Если при сдвиге две плитки с одинаковым значением &quot;налетают&quot; друг на друга, они соединяются в одну,
а ее значение равно сумме соединившихся плиток. Давай реализуем это.

Условия задачи:
Создай приватный метод boolean mergeRow(int[] row), который соединяет соседние пары одинаковых ненулевых элементов
массива row. Соединение должно происходить при сдвиге влево.

Если подряд стоят более двух одинаковых ненулевых элементов, соединяются сначала самые левые.
Соединенные элементы повторно не соединяются (в рамках текущего хода).

Метод должен возвращать true, если хотя бы один элемент массива был в нем изменен, иначе &mdash; false.

Примеры:
- Было (4, 4, 0, 0), стало (8, 0, 0, 0). Метод вернул true.
- Было (2, 2, 2, 2), стало (4, 0, 4, 0). Метод вернул true.
- Было (4, 2, 2, 0), стало (4, 4, 0, 0). Метод вернул true.
- Было (0, 2, 2, 0), стало (0, 4, 0, 0). Метод вернул true.
- Было (0, 2, 2, 2), стало (0, 4, 0, 2). Метод вернул true.
- Было (4, 0, 4, 0), стало (4, 0, 4, 0). Метод вернул false.



Игра 2048 (10/18)

Исходя из правил игры, мы можем сдвинуть все плитки в одну из 4 сторон: вверх, вниз, вправо, влево.
При этом плитки со значением 2 и больше уходят в одну сторону (сторону сдвига), а пустые &mdash; в противоположную.

На данном этапе реализуем сдвиг влево. Для этого нам понадобится приватный метод boolean compressRow(int[] row), который сдвигает все
ненулевые элементы массива row влево (в сторону нулевого индекса), а нулевые элементы переносит вправо.
Если хотя бы один элемент был передвинут, метод возвращает true, иначе &ndash; false.

Примеры:
- Было (0, 2, 0, 2), стало (2, 2, 0, 0). Метод вернул true.
- Было (2, 2, 2, 2), стало (2, 2, 2, 2). Метод вернул false.
- Было (0, 4, 0, 2), стало (4, 2, 0, 0). Метод вернул true.
- Было (4, 2, 0, 2), стало (4, 2, 2, 0). Метод вернул true.
- Было (2, 4, 0, 0), стало (2, 4, 0, 0). Метод вернул false.



Игра 2048 (10/18)

Уже намного лучше. Но, думаю, мы можем больше. Давай раскрасим клетки с одинаковыми значениями в одинаковые цвета.

Для этого напишем метод setCellColoredNumber, который будет принимать в качестве параметров координаты клетки
и ее значение, и :
- вычислять цвет клетки (используя метод getColorByValue, который описан ниже),
- отображать значение и цвет клетки на игровом поле.

Для вычисления цвета реализуем вспомогательный метод getColorByValue, который будет возвращать цвет в зависимости
от переданного в метод значения клетки. Например, если мы передаем в метод 2, то он возвращает Color.BLUE и т.п.
Цвета клеток для разных чисел должны быть разные, а для одинаковых - одинаковые.
Числа, которые могут находиться в матрице gameField: 0, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048.

Для отображения значения и цвета клетки с координатами x и y на игровом поле нам на помощь придет специальный метод
setCellValueEx(int x, int y, Color cellColor, String value) класса Game.
Воспользуйся им, чтобы изменить цвет и значение клетки одновременно.
Значение 0 на игровом поле отображать не нужно: вместо него мы видим пустую клетку. Поэтому для ячеек со значением 0
просто передай в метод setCellValueEx() пустую строку.

И последний штрих: в методе drawScene() замени вызов метода setCellColor() на setCellColoredNumber().

Примечания:
1. Для наглядности пустые клетки в примерах будут обозначены нулями.
2. Координаты матрицы должны соответствовать отображаемым координатам.

Пример:
Матрица: {
{2, 4, 8, 16},
{32, 64, 128, 256},
{512, 1024, 2048, 0},
{2, 4, 8, 16}
}
Соответствующее отображение:
!!!Картинка!!!!
Чтобы это реализовать, при установке значения игровому полю используй инвертированные координаты матрицы.
Например, для установки значения клетке с координатами (х, у) используй значение матрицы gameField[y][x].

Чтобы лучше понять, о чем идет речь, запусти отрисовку этой матрицы, сначала используя gameField[y][x], а затем &mdash; gameField[х][у].



Игра 2048 (10/18)

Согласно правилам, при запуске игры значения двух случайных клеток должны быть 2 либо 4 с вероятностью 90% и 10% соответственно.

Для выполнения этого условия, создай метод createNewNumber() и вызови его в методе createGame() 2 раза.
Метод createNewNumber():
1) случайным образом выбирает ячейку матрицы gameField со значением 0.
Подсказка: случайная ячейка - ячейка со случайными координатами. Для получения случайной координаты x нужно
использовать случайное число в диапазоне от 0 до SIZE. Это можно сделать с помощью вызова метода getRandomNumber(int)
с параметром SIDE. Для координаты y нужно сделать аналогично. После получения координат нужно проверить значение ячейки и,
если это значение не 0, то нужно повторять поиск случайной ячейки до тех пор, пока ее значение не будет равно 0;
2) случайным образом присваивает этой ячейке значение 2 (вероятность 90%) или 4 (вероятность 10%).
Подсказка: для этого используй метод getRandomNumber(int) с параметром 10:
метод getRandomNumber(10) возвращает случайное число в диапазоне от 0 до 9. Значит число 9 он вернет с вероятностью 10%.
- если getRandomNumber(10) вернет число 9, ячейке должно быть присвоено значение 4;
- если getRandomNumber(10) вернет число от 0 до 8, ячейке должно быть присвоено значение 2.



