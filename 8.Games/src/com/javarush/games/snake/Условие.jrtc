taskKey="com.javarush.games.snake.part13"\n\nИгра змейка (13/20)

До этого мы устанавливали координаты яблока вручную. Необходимо создать метод для генерации новых яблок. Назовем его createNewApple().
Метод должен генерировать случайные координаты ячейки в пределах игрового поля, на которой будет появляться яблоко. Ссылку на новосозданное
яблоко присвой полю apple. Также в конце каждого хода нужно проверить, &quot;живое&quot; ли текущее яблоко, если нет &mdash; создать новое.
Для генерирования случайных чисел вызывай метод родительского класса getRandomNumber(int).


Требования:
1.	В классе SnakeGame должен существовать приватный метод void createNewApple().
2.	В методе createNewApple() должен два раза вызываться метод getRandomNumber(int). Первый раз &mdash; с параметром WIDTH, второй &mdash; c HEIGHT.
3.	В методе createNewApple() должен создаваться новый объект типа Apple. В качестве параметров передай результаты двух вызовов метода getRandomNumber(int).
4.	Полю apple должна присваиваться ссылка на созданный объект типа Apple.
5.	В методе createGame() не должен создаваться новый объект типа Apple.
6.	В методе createGame() должен вызываться метод createNewApple() перед методом drawScene().
7.	В методе onTurn() перед вызовом метода drawScene(), если apple.isAlive == false, необходимо вызвать метод createNewApple().


Игра змейка (13/20)

У нас уже есть змейка, которая умеет двигаться, и яблоко. Теперь реализуем их взаимодействие. Для начала добавь переменную яблока в
класс SnakeGame, и в момент создания игры инициализируй ее координатами (5, 5). Также прорисуй яблоко.

Перепиши метод move() класса Snake. Теперь в качестве аргумента он должен принимать яблоко, и если окажется, что змейка &quot;съела&quot; яблоко, состояние
яблока должно устанавливаться в &quot;неживое&quot;, а размер змейки &mdash; увеличиваться на 1 элемент.



Игра змейка (13/20)

Добавим возможность управления нашей змейкой. Для считывания клавиш переопредели метод onKeyPress(Key) родительского класса Game. В зависимости от
нажатой клавиши, установи соответствующее направление движения змейке. Учти, что змейка не может мгновенно развернуться на 180 градусов.



Игра змейка (13/20)

Теперь нужно скомбинировать работу методов createNewHead() и removeTail(). Удобно сделать это в методе move().

Добавь проверку на выход змейки за пределы игрового поля. Если новая голова вышла за пределы игрового поля, установи состояние змейки в &quot;неживая&quot;.

После передвижения змейки нужно очищать игровое поле от уже несуществующих ее элементов. Для этого в методе drawScene() нужно не только
изменять цвет ячеек, но и устанавливать в их значении пустую строку.



Игра змейка (13/20)

Движение змейки очень простое: в соседней с головой ячейке создается новая голова, а последний элемент (хвост) змейки удаляется.

В классе Snake реализуй метод createNewHead(), который создает новый элемент GameObject и возвращает его. Новый
элемент GameObject должен создаваться рядом с элементом, в котором на данный момент находится голова змейки (элемент с индексом 0 из snakeParts).
Новый элемент GameObject создается с той стороны, куда движется змейка (поле direction).
Пример:
- если змейка движется влево, new GameObject(headX-1, headY);
- если змейка движется вниз, new GameObject(headX, headY + 1)
Здесь headX &mdash; координата головы змеи x, headY &mdash; координата головы змеи y.

Примечание: координаты могут быть отрицательные и/или быть за границами игрового поля. Пока что это нормально, в дальнейших частях задачи исправим.

В классе Snake создай метод removeTail() и реализуй его.



Игра змейка (13/20)

Каждый ход змейка должна перемещаться. Ход занимает определенный промежуток времени, который ты можешь задать.

Для определения логики передвижения змейки, в классе Snake создай
метод void move(). В классе SnakeGame переопредели родительский метод onTurn(int). Всё, что должно происходить в игре на протяжении одного хода,
описывается здесь. После передвижения змейки не забудь перерисовать игровое поле.

Для установки продолжительности хода, создай переменную turnDelay. Игра будет начинаться со скоростью 300мс/ход. Установи продолжительность хода
в момент создания игры.



