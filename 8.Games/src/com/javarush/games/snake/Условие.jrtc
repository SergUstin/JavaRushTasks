taskKey="com.javarush.games.snake.part14"\n\nИгра змейка (14/20)

Сейчас змейка может ходить сквозь свое тело, а это не по правилам. Чтобы это исправить, нужно проверять новосозданную голову змейки на совпадение
со всеми остальными элементами её тела. Для этого в классе Snake создай метод checkCollision(GameObject). Метод checkCollision(GameObject) должен
возвращать true, если координаты переданного объекта совпадают с координатами одного из элементов тела змейки. Также в методе move(Apple) добавь
проверку на столкновения новой головы и тела. Если было столкновение, установи переменной isAlive значение false.


Требования:
1.	В классе Snake должен существовать публичный метод boolean checkCollision(GameObject).
2.	Метод checkCollision(GameObject) должен возвращать true, если координаты объекта, пришедшего параметром, совпали с координатами одного из элементов змеи (список snakeParts).
3.	Метод checkCollision(GameObject) должен возвращать false, если координаты объекта, пришедшего параметром, не совпали с координатами всех элементов змеи (список snakeParts).
4.	В методе move(Apple) должен быть вызван метод checkCollision(GameObject) с параметром &lt;новая голова&gt; перед добавлением нового сегмента змеи в список snakeParts.
5.	Если вызов метода checkCollision(GameObject) вернул true, полю isAlive необходимо установить значение false.
6.	Если вызов метода checkCollision(GameObject) вернул true, содержимое списка snakeParts не должно изменяться.


Игра змейка (14/20)

До этого мы устанавливали координаты яблока вручную. Необходимо создать метод для генерации новых яблок. Назовем его createNewApple().
Метод должен генерировать случайные координаты ячейки в пределах игрового поля, на которой будет появляться яблоко. Ссылку на новосозданное
яблоко присвой полю apple. Также в конце каждого хода нужно проверить, &quot;живое&quot; ли текущее яблоко, если нет &mdash; создать новое.
Для генерирования случайных чисел вызывай метод родительского класса getRandomNumber(int).



Игра змейка (14/20)

У нас уже есть змейка, которая умеет двигаться, и яблоко. Теперь реализуем их взаимодействие. Для начала добавь переменную яблока в
класс SnakeGame, и в момент создания игры инициализируй ее координатами (5, 5). Также прорисуй яблоко.

Перепиши метод move() класса Snake. Теперь в качестве аргумента он должен принимать яблоко, и если окажется, что змейка &quot;съела&quot; яблоко, состояние
яблока должно устанавливаться в &quot;неживое&quot;, а размер змейки &mdash; увеличиваться на 1 элемент.



Игра змейка (14/20)

Добавим возможность управления нашей змейкой. Для считывания клавиш переопредели метод onKeyPress(Key) родительского класса Game. В зависимости от
нажатой клавиши, установи соответствующее направление движения змейке. Учти, что змейка не может мгновенно развернуться на 180 градусов.



Игра змейка (14/20)

Теперь нужно скомбинировать работу методов createNewHead() и removeTail(). Удобно сделать это в методе move().

Добавь проверку на выход змейки за пределы игрового поля. Если новая голова вышла за пределы игрового поля, установи состояние змейки в &quot;неживая&quot;.

После передвижения змейки нужно очищать игровое поле от уже несуществующих ее элементов. Для этого в методе drawScene() нужно не только
изменять цвет ячеек, но и устанавливать в их значении пустую строку.



Игра змейка (14/20)

Движение змейки очень простое: в соседней с головой ячейке создается новая голова, а последний элемент (хвост) змейки удаляется.

В классе Snake реализуй метод createNewHead(), который создает новый элемент GameObject и возвращает его. Новый
элемент GameObject должен создаваться рядом с элементом, в котором на данный момент находится голова змейки (элемент с индексом 0 из snakeParts).
Новый элемент GameObject создается с той стороны, куда движется змейка (поле direction).
Пример:
- если змейка движется влево, new GameObject(headX-1, headY);
- если змейка движется вниз, new GameObject(headX, headY + 1)
Здесь headX &mdash; координата головы змеи x, headY &mdash; координата головы змеи y.

Примечание: координаты могут быть отрицательные и/или быть за границами игрового поля. Пока что это нормально, в дальнейших частях задачи исправим.

В классе Snake создай метод removeTail() и реализуй его.



