taskKey="com.javarush.games.snake.part07"\n\nИгра змейка (7/20)

Объект на игровом поле может иметь одно из двух состояний: он может быть или &quot;жив&quot; (isAlive=true), или нет (isAlive=false).
Например, если змейка ударяется о край игрового поля, она умирает. То же происходит с яблоком, когда его съедает змейка. Чтобы хранить состояние
объектов, создай в классах Apple и Snake переменную boolean isAlive. Измени отрисовку змейки таким образом, чтобы &quot;неживая&quot; змейка была красного цвета.

Змейка может двигаться в одном из четырех направлений. Чтобы указать направления, создай enum Direction со значениями UP, RIGHT, DOWN, LEFT,
а в классе Snake &mdash; поле direction, которое будет хранить текущее направление движения. Пусть изначально змейка двигается влево. Изменять
направление движения змейки будем методом setDirection(Direction). Создай его.


Требования:
1.	В классе Apple должно существовать публичное поле boolean isAlive, инициализированное значением true.
2.	В классе Snake должно существовать публичное поле boolean isAlive, инициализированное значением true.
3.	В методе draw(Game) класса Snake замени все вызовы метода setCellValue(int, int, String) на вызовы метода setCellValueEx(int, int, Color, String, Color, int) с параметрами: x, y, Color.NONE, HEAD_SIGN (или BODY_SIGN), &lt;цвет змейки&gt;, 75. Если змейка &quot;неживая&quot;, ее цвет должен быть Color.RED. Иначе &mdash; любой другой, например, Color.BLACK.
4.	Должен существовать публичный enum Direction со значениями: UP, RIGHT, DOWN, LEFT.
5.	В классе Snake должно существовать приватное поле Direction direction, инициализированное при объявлении значением Direction.LEFT.
6.	В классе Snake должен существовать публичный сеттер поля direction &mdash; setDirection(Direction), который устанавливает полю класса значение, полученное в качестве параметра.


Игра змейка (7/20)

Когда у нас уже есть змейка, нужно её отрисовать. Для этого, по аналогии с классом Apple, в классе Snake создай константы HEAD_SIGN и BODY_SIGN,
которые будут хранить символы для отрисовки головы и тела змейки. Также создай метод draw(Game), который должен отрисовывать змейку
на игровом поле.

Управлять отрисовкой змейки будем из класса SnakeGame. Поэтому создай переменную Snake snake в классе SnakeGame: в ней будет храниться
текущее состояние змейки. В методе createGame() создай новую змейку в центре игрового поля и присвой её переменной snake. В методе drawScene()
вызови у змейки метод draw(Game), чтобы отобразить её на игровом поле.



Игра змейка (7/20)

Теперь займемся змейкой, а тестовое создание и отрисовку яблока в createGame() удалим.

Создай класс Snake. Змейка будет состоять из нескольких ячеек, т.е. из нескольких GameObject-ов. Кроме того,
их количество может изменяться: оно будет
увеличиваться при поедании яблок. Список всех сегментов змейки будем хранить в поле List&lt;GameObject&gt;
snakeParts.

В классе Snake добавь конструктор, который будет создавать сразу три сегмента змейки.



Игра змейка (7/20)

Одним из игровых объектов будет яблоко. Создай для него класс Apple и унаследуй его от класса GameObject.

Чтобы отобразить яблоко на игровом поле, можно покрасить ячейку, содержащую яблоко, в какой-нибудь цвет. Или можно вывести в этой ячейке
какой-нибудь символ, похожий на яблоко. Пусть класс Apple хранит этот символ в переменной APPLE_SIGN.

В классе Apple добавь метод draw(Game): он будет отрисовывать яблоко на игровом поле. Для этого в методе draw(Game game) нужно
вызвать: game.setCellValueEx(...).

Так как в классе Apple используются классы Game и Color, а эти (и другие) классы &quot;движка&quot; находятся в пакете
com.javarush.engine.cell, то чтобы ими пользоваться, класс Apple должен содержать такой импорт:
import com.javarush.engine.cell.*;

Чтобы посмотреть, как будет выглядеть яблоко, в методе createGame() создай новое с координатами (7, 7) и вызови у него метод draw(Game).



Игра змейка (7/20)

Для хранения объектов игрового поля нам понадобится дополнительный класс.
Объект этого класса будет хранить координаты соответствующей ячейки.
Назовем его GameObject.



Игра змейка (7/20)

Давай раскрасим игровое поле. Это можно сделать в методе initialize как и все остальные действия игры. Но &quot;лепить&quot;
все в один метод - плохая практика. Поэтому изначально создадим несколько необходимых методов, каждый из которых будет
отвечать за определенный кусок работы: метод drawScene - за отрисовку экрана, метод createGame - за действия, которые
нужно выполнить для создания игры. Исходя из этого нам нужно в методе initialize() вызвать метод createGame(), в котором
в свою очередь будет вызываться метод drawScene().

Чтобы окрасить ячейки игрового поля в определенный цвет нужно пройти по всем ячейкам (используй циклы) и для каждой из них
вызвать метод setCellColor.
Подсказка:
for (int x = 0; x &lt; WIDTH; x++) {
for (int y = 0; y &lt; HEIGHT; y++) {
setCellColor(x, y, Color);
}
}



