taskKey="com.javarush.games.snake.part08"\n\nИгра змейка (8/20)

Каждый ход змейка должна перемещаться. Ход занимает определенный промежуток времени, который ты можешь задать.

Для определения логики передвижения змейки, в классе Snake создай
метод void move(). В классе SnakeGame переопредели родительский метод onTurn(int). Всё, что должно происходить в игре на протяжении одного хода,
описывается здесь. После передвижения змейки не забудь перерисовать игровое поле.

Для установки продолжительности хода, создай переменную turnDelay. Игра будет начинаться со скоростью 300мс/ход. Установи продолжительность хода
в момент создания игры.


Требования:
1.	В классе Snake должен существовать публичный метод void move().
2.	В классе SnakeGame должен быть переопределен метод onTurn(int) родительского класса Game.
3.	В методе onTurn(int) у объекта snake должен быть вызван метод move().
4.	В методе onTurn(int) должен быть вызван метод drawScene() после вызова snake.move().
5.	В классе SnakeGame должно существовать приватное поле turnDelay типа int.
6.	В методе createGame() поле turnDelay должно быть инициализировано значением 300.
7.	В методе createGame() должен вызываться метод setTurnTimer(int). В качестве параметра передай turnDelay.


Игра змейка (8/20)

Объект на игровом поле может иметь одно из двух состояний: он может быть или &quot;жив&quot; (isAlive=true), или нет (isAlive=false).
Например, если змейка ударяется о край игрового поля, она умирает. То же происходит с яблоком, когда его съедает змейка. Чтобы хранить состояние
объектов, создай в классах Apple и Snake переменную boolean isAlive. Измени отрисовку змейки таким образом, чтобы &quot;неживая&quot; змейка была красного цвета.

Змейка может двигаться в одном из четырех направлений. Чтобы указать направления, создай enum Direction со значениями UP, RIGHT, DOWN, LEFT,
а в классе Snake &mdash; поле direction, которое будет хранить текущее направление движения. Пусть изначально змейка двигается влево. Изменять
направление движения змейки будем методом setDirection(Direction). Создай его.



Игра змейка (8/20)

Когда у нас уже есть змейка, нужно её отрисовать. Для этого, по аналогии с классом Apple, в классе Snake создай константы HEAD_SIGN и BODY_SIGN,
которые будут хранить символы для отрисовки головы и тела змейки. Также создай метод draw(Game), который должен отрисовывать змейку
на игровом поле.

Управлять отрисовкой змейки будем из класса SnakeGame. Поэтому создай переменную Snake snake в классе SnakeGame: в ней будет храниться
текущее состояние змейки. В методе createGame() создай новую змейку в центре игрового поля и присвой её переменной snake. В методе drawScene()
вызови у змейки метод draw(Game), чтобы отобразить её на игровом поле.



Игра змейка (8/20)

Теперь займемся змейкой, а тестовое создание и отрисовку яблока в createGame() удалим.

Создай класс Snake. Змейка будет состоять из нескольких ячеек, т.е. из нескольких GameObject-ов. Кроме того,
их количество может изменяться: оно будет
увеличиваться при поедании яблок. Список всех сегментов змейки будем хранить в поле List&lt;GameObject&gt;
snakeParts.

В классе Snake добавь конструктор, который будет создавать сразу три сегмента змейки.



Игра змейка (8/20)

Одним из игровых объектов будет яблоко. Создай для него класс Apple и унаследуй его от класса GameObject.

Чтобы отобразить яблоко на игровом поле, можно покрасить ячейку, содержащую яблоко, в какой-нибудь цвет. Или можно вывести в этой ячейке
какой-нибудь символ, похожий на яблоко. Пусть класс Apple хранит этот символ в переменной APPLE_SIGN.

В классе Apple добавь метод draw(Game): он будет отрисовывать яблоко на игровом поле. Для этого в методе draw(Game game) нужно
вызвать: game.setCellValueEx(...).

Так как в классе Apple используются классы Game и Color, а эти (и другие) классы &quot;движка&quot; находятся в пакете
com.javarush.engine.cell, то чтобы ими пользоваться, класс Apple должен содержать такой импорт:
import com.javarush.engine.cell.*;

Чтобы посмотреть, как будет выглядеть яблоко, в методе createGame() создай новое с координатами (7, 7) и вызови у него метод draw(Game).



Игра змейка (8/20)

Для хранения объектов игрового поля нам понадобится дополнительный класс.
Объект этого класса будет хранить координаты соответствующей ячейки.
Назовем его GameObject.



