taskKey="com.javarush.games.snake.part12"\n\nИгра змейка (12/20)

У нас уже есть змейка, которая умеет двигаться, и яблоко. Теперь реализуем их взаимодействие. Для начала добавь переменную яблока в
класс SnakeGame, и в момент создания игры инициализируй ее координатами (5, 5). Также прорисуй яблоко.

Перепиши метод move() класса Snake. Теперь в качестве аргумента он должен принимать яблоко, и если окажется, что змейка &quot;съела&quot; яблоко, состояние
яблока должно устанавливаться в &quot;неживое&quot;, а размер змейки &mdash; увеличиваться на 1 элемент.


Требования:
1.	В классе SnakeGame должно существовать приватное поле Apple apple.
2.	В методе createGame() поле apple необходимо инициализировать новым объектом типа Apple с параметрами 5, 5 перед вызовом метода drawScene().
3.	В методе drawScene() необходимо вызвать у apple метод draw(Game) после отрисовки змеи. В качестве параметра передай в метод this.
4.	В классе Snake не должен существовать метод public void move().
5.	В классе Snake должен существовать публичный метод void move(Apple apple).
6.	В методе move(Apple), если координаты новой головы змеи совпадают с координатами яблока, необходимо установить яблоку isAlive=false и не удалять хвост змеи.
7.	В методе onTurn(int) класса SnakeGame необходимо вызвать у змеи метод move(Apple).


Игра змейка (12/20)

Добавим возможность управления нашей змейкой. Для считывания клавиш переопредели метод onKeyPress(Key) родительского класса Game. В зависимости от
нажатой клавиши, установи соответствующее направление движения змейке. Учти, что змейка не может мгновенно развернуться на 180 градусов.



Игра змейка (12/20)

Теперь нужно скомбинировать работу методов createNewHead() и removeTail(). Удобно сделать это в методе move().

Добавь проверку на выход змейки за пределы игрового поля. Если новая голова вышла за пределы игрового поля, установи состояние змейки в &quot;неживая&quot;.

После передвижения змейки нужно очищать игровое поле от уже несуществующих ее элементов. Для этого в методе drawScene() нужно не только
изменять цвет ячеек, но и устанавливать в их значении пустую строку.



Игра змейка (12/20)

Движение змейки очень простое: в соседней с головой ячейке создается новая голова, а последний элемент (хвост) змейки удаляется.

В классе Snake реализуй метод createNewHead(), который создает новый элемент GameObject и возвращает его. Новый
элемент GameObject должен создаваться рядом с элементом, в котором на данный момент находится голова змейки (элемент с индексом 0 из snakeParts).
Новый элемент GameObject создается с той стороны, куда движется змейка (поле direction).
Пример:
- если змейка движется влево, new GameObject(headX-1, headY);
- если змейка движется вниз, new GameObject(headX, headY + 1)
Здесь headX &mdash; координата головы змеи x, headY &mdash; координата головы змеи y.

Примечание: координаты могут быть отрицательные и/или быть за границами игрового поля. Пока что это нормально, в дальнейших частях задачи исправим.

В классе Snake создай метод removeTail() и реализуй его.



Игра змейка (12/20)

Каждый ход змейка должна перемещаться. Ход занимает определенный промежуток времени, который ты можешь задать.

Для определения логики передвижения змейки, в классе Snake создай
метод void move(). В классе SnakeGame переопредели родительский метод onTurn(int). Всё, что должно происходить в игре на протяжении одного хода,
описывается здесь. После передвижения змейки не забудь перерисовать игровое поле.

Для установки продолжительности хода, создай переменную turnDelay. Игра будет начинаться со скоростью 300мс/ход. Установи продолжительность хода
в момент создания игры.



Игра змейка (12/20)

Объект на игровом поле может иметь одно из двух состояний: он может быть или &quot;жив&quot; (isAlive=true), или нет (isAlive=false).
Например, если змейка ударяется о край игрового поля, она умирает. То же происходит с яблоком, когда его съедает змейка. Чтобы хранить состояние
объектов, создай в классах Apple и Snake переменную boolean isAlive. Измени отрисовку змейки таким образом, чтобы &quot;неживая&quot; змейка была красного цвета.

Змейка может двигаться в одном из четырех направлений. Чтобы указать направления, создай enum Direction со значениями UP, RIGHT, DOWN, LEFT,
а в классе Snake &mdash; поле direction, которое будет хранить текущее направление движения. Пусть изначально змейка двигается влево. Изменять
направление движения змейки будем методом setDirection(Direction). Создай его.



