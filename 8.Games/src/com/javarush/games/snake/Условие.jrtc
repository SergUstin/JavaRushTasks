taskKey="com.javarush.games.snake.part06"\n\nИгра змейка (6/20)

Когда у нас уже есть змейка, нужно её отрисовать. Для этого, по аналогии с классом Apple, в классе Snake создай константы HEAD_SIGN и BODY_SIGN,
которые будут хранить символы для отрисовки головы и тела змейки. Также создай метод draw(Game), который должен отрисовывать змейку
на игровом поле.

Управлять отрисовкой змейки будем из класса SnakeGame. Поэтому создай переменную Snake snake в классе SnakeGame: в ней будет храниться
текущее состояние змейки. В методе createGame() создай новую змейку в центре игрового поля и присвой её переменной snake. В методе drawScene()
вызови у змейки метод draw(Game), чтобы отобразить её на игровом поле.


Требования:
1.	В классе Snake должно существовать приватное статическое final поле String HEAD_SIGN, инициализированное при объявлении. Например, использовать можно UTF-16 символ &quot;\uD83D\uDC7E&quot;.
2.	В классе Snake должно существовать приватное статическое final поле String BODY_SIGN, инициализированное при объявлении. Например, использовать можно UTF-8 символ &quot;\u26AB&quot;.
3.	В классе Snake должен существовать публичный void метод draw(Game game).
4.	В методе draw(Game) должен вызываться метод setCellValue(int, int, String) класса Game для каждого объекта GameObject из списка snakeParts.
5.	Метод setCellValue(int, int, String) для головы змеи (элемент с индексом 0 из списка snakeParts) должен вызываться с параметрами x и y головы, и HEAD_SIGN.
6.	Метод setCellValue(int, int, String) для каждого сегмента тела змеи (элементы с индексом не 0 из списка snakeParts) должен вызываться с параметрами x и y сегмента, и BODY_SIGN.
7.	В классе SnakeGame должно существовать приватное поле Snake snake.
8.	В методе createGame() класса SnakeGame должна быть создана новая змея (экземпляр класса Snake) с координатами: WIDTH / 2, HEIGHT / 2 перед вызовом метода drawScene().
9.	В методе createGame() полю snake необходимо присвоить ссылку на созданный объект типа Snake.
10.	В методе drawScene() последним должен быть вызван метод draw(Game) у объекта snake. В качестве параметра метода передай this.
11.	В классе Snake должен быть импорт всего содержимого пакета com.javarush.engine.cell.


Игра змейка (6/20)

Теперь займемся змейкой, а тестовое создание и отрисовку яблока в createGame() удалим.

Создай класс Snake. Змейка будет состоять из нескольких ячеек, т.е. из нескольких GameObject-ов. Кроме того,
их количество может изменяться: оно будет
увеличиваться при поедании яблок. Список всех сегментов змейки будем хранить в поле List&lt;GameObject&gt;
snakeParts.

В классе Snake добавь конструктор, который будет создавать сразу три сегмента змейки.



Игра змейка (6/20)

Одним из игровых объектов будет яблоко. Создай для него класс Apple и унаследуй его от класса GameObject.

Чтобы отобразить яблоко на игровом поле, можно покрасить ячейку, содержащую яблоко, в какой-нибудь цвет. Или можно вывести в этой ячейке
какой-нибудь символ, похожий на яблоко. Пусть класс Apple хранит этот символ в переменной APPLE_SIGN.

В классе Apple добавь метод draw(Game): он будет отрисовывать яблоко на игровом поле. Для этого в методе draw(Game game) нужно
вызвать: game.setCellValueEx(...).

Так как в классе Apple используются классы Game и Color, а эти (и другие) классы &quot;движка&quot; находятся в пакете
com.javarush.engine.cell, то чтобы ими пользоваться, класс Apple должен содержать такой импорт:
import com.javarush.engine.cell.*;

Чтобы посмотреть, как будет выглядеть яблоко, в методе createGame() создай новое с координатами (7, 7) и вызови у него метод draw(Game).



Игра змейка (6/20)

Для хранения объектов игрового поля нам понадобится дополнительный класс.
Объект этого класса будет хранить координаты соответствующей ячейки.
Назовем его GameObject.



Игра змейка (6/20)

Давай раскрасим игровое поле. Это можно сделать в методе initialize как и все остальные действия игры. Но &quot;лепить&quot;
все в один метод - плохая практика. Поэтому изначально создадим несколько необходимых методов, каждый из которых будет
отвечать за определенный кусок работы: метод drawScene - за отрисовку экрана, метод createGame - за действия, которые
нужно выполнить для создания игры. Исходя из этого нам нужно в методе initialize() вызвать метод createGame(), в котором
в свою очередь будет вызываться метод drawScene().

Чтобы окрасить ячейки игрового поля в определенный цвет нужно пройти по всем ячейкам (используй циклы) и для каждой из них
вызвать метод setCellColor.
Подсказка:
for (int x = 0; x &lt; WIDTH; x++) {
for (int y = 0; y &lt; HEIGHT; y++) {
setCellColor(x, y, Color);
}
}



Игра змейка (6/20)

Давай напишем игру &quot;Змейка&quot;.
Правила игры:
1. Игрок управляет движением змейки, которая ползает по квадратному полю: вверх, вниз, вправо и влево.
Остановить движение змейки нельзя.
2. Цель игры &mdash; съесть как можно большее количество яблок, которые появляются поочередно, в случайном месте
игрового поля, как только змейка &quot;проглотит&quot; предыдущее.
3. С каждым новым яблоком змейка растет на один сегмент (занимает на одну ячейку больше). 3. В нашей игре
на старте змейка занимает три ячейки (имеет три сегмента) и может дорасти до 28.
4. По мере того, как растет змейка, скорость игры увеличивается.
5. Змейка не может проходить &quot;сквозь себя&quot; или выходить за пределы игрового поля.
5. Игра оканчивается победой, если длина змейки увеличилась до 28 сегментов.
6. Игра оканчивается проигрышем, если касается сама себя или края поля.
Теперь приступаем к реализации игры:
Нам понадобится класс, который будет содержать логику игры. Назовем его SnakeGame. Не забудь унаследовать
его от класса Game. Этот и другие классы &quot;движка&quot; находятся в пакете com.javarush.engine.cell,
и чтобы ими пользоваться, класс SnakeGame должен содержать такой импорт:
import com.javarush.engine.cell.*;
Если ты все сделал правильно, уже можно запустить SnakeGame и увидеть пустое игровое поле.
Создай переменные для хранения ширины и высоты игрового поля.
Переопредели метод родительского класса public void initialize(): он будет содержать команды, которые
выполнятся один раз при запуске игры. Например, установка размеров игрового поля.



