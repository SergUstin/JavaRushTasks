taskKey="com.javarush.games.snake.part19"\n\nИгра змейка (19/20)

Остался последний штрих &mdash; ввести подсчёт и отображение набранных очков. Для подсчёта создай переменную score и присвой ей значение 0 на момент
создания новой игры. Для отображения значения score на экране используй метод setScore(int). Вызывай его после каждого изменения score.
Значение score должно увеличиваться на 5 после каждого съеденного яблока.

Также после каждого съеденного яблока должна увеличиваться скорость игры, то есть уменьшаться на 10 значение turnDelay (временной промежуток на ход).
После каждого изменения turnDelay должен вызываться метод setTurnTimer(int).


Требования:
1.	В классе SnakeGame должно существовать приватное поле int score.
2.	Поле score должно быть инициализировано в методе createGame() значением 0.
3.	Метод createGame() должен вызывать метод setScore(int) с параметром score.
4.	Метод onTurn(int) должен увеличивать значение поля score на 5, если яблоко &quot;неживое&quot;.
5.	Метод onTurn(int) должен вызвать метод setScore(int) с параметром score, если яблоко &quot;неживое&quot;.
6.	Метод onTurn(int) должен уменьшить значение поля turnDelay на 10, если яблоко &quot;неживое&quot;.
7.	Метод onTurn(int) должен вызвать метод setTurnTimer(int) с параметром turnDelay, если яблоко &quot;неживое&quot;.


Игра змейка (19/20)

Давай поправим управление. Значения поля direction могут меняться только на валидные в данный момент: LEFT, RIGHT, UP, DOWN.



Игра змейка (19/20)

На данном этапе у нас есть один баг &mdash; яблоко может сгенерироваться на теле змейки. Для устранения бага, воспользуемся созданным
методом checkCollision(GameObject). Метод createNewApple() должен создавать новое яблоко (с новыми координатами) в цикле до тех пор,
пока результат вызова метода checkCollision(GameObject) не будет false.

Также давай реализуем рестарт игры нажатием клавиши SPACE (пробел). Игра запускается заново только если она остановлена.



Игра змейка (19/20)

Игра должна останавливаться и в случае победы. Победа наступает, когда змейка увеличивается до определённого размера. Для хранения этого размера
в классе SnakeGame создай константу GOAL и инициализируй её значением 28. Для определения текущего размера змейки в классе Snake, создай
метод getLength() и реализуй его. По аналогии с методом gameOver(), создай и реализуй метод win(). Только вместо надписи &quot;GAME OVER&quot; он должен
выводить &quot;YOU WIN&quot;. Проверка победы также производится в конце каждого хода.



Игра змейка (19/20)

Для хранения состояния игры нам понадобится переменная isGameStopped в классе SnakeGame. Проинициализируй
её в методе createGame(). Когда игра проиграна, её нужно остановить и вывести сообщение об этом игроку.
Для этого создай метод gameOver() и добавь в него команды, которые выполняются при остановке игры (проигрыше):
- вызов метода stopTurnTimer();
- присвоение флагу isGameStopped значения true;
- вывод сообщения &quot;GAME OVER&quot;.
Проверку состояния флага isGameStopped нужно проводить в конце каждого хода, и если игра остановлена, вызывать метод gameOver().



Игра змейка (19/20)

Сейчас змейка может ходить сквозь свое тело, а это не по правилам. Чтобы это исправить, нужно проверять новосозданную голову змейки на совпадение
со всеми остальными элементами её тела. Для этого в классе Snake создай метод checkCollision(GameObject). Метод checkCollision(GameObject) должен
возвращать true, если координаты переданного объекта совпадают с координатами одного из элементов тела змейки. Также в методе move(Apple) добавь
проверку на столкновения новой головы и тела. Если было столкновение, установи переменной isAlive значение false.



