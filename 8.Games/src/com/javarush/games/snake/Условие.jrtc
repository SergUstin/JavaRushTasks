taskKey="com.javarush.games.snake.part11"\n\nИгра змейка (11/20)

Добавим возможность управления нашей змейкой. Для считывания клавиш переопредели метод onKeyPress(Key) родительского класса Game. В зависимости от
нажатой клавиши, установи соответствующее направление движения змейке. Учти, что змейка не может мгновенно развернуться на 180 градусов.


Требования:
1.	В классе SnakeGame должен быть переопределен метод onKeyPress(Key) родительского класса Game.
2.	Если в метод onKeyPress(Key) пришел параметр Key.LEFT, необходимо вызвать у змейки метод setDirection(Direction) c параметром Direction.LEFT.
3.	Если в метод onKeyPress(Key) пришел параметр Key.RIGHT, необходимо вызвать у змейки метод setDirection(Direction) c параметром Direction.RIGHT.
4.	Если в метод onKeyPress(Key) пришел параметр Key.UP, необходимо вызвать у змейки метод setDirection(Direction) c параметром Direction.UP.
5.	Если в метод onKeyPress(Key) пришел параметр Key.DOWN, необходимо вызвать у змейки метод setDirection(Direction) c параметром Direction.DOWN.
6.	В классе Snake метод setDirection(Direction) не должен изменять направление движения змейки, если параметр метода противоположен текущему направлению.


Игра змейка (11/20)

Теперь нужно скомбинировать работу методов createNewHead() и removeTail(). Удобно сделать это в методе move().

Добавь проверку на выход змейки за пределы игрового поля. Если новая голова вышла за пределы игрового поля, установи состояние змейки в &quot;неживая&quot;.

После передвижения змейки нужно очищать игровое поле от уже несуществующих ее элементов. Для этого в методе drawScene() нужно не только
изменять цвет ячеек, но и устанавливать в их значении пустую строку.



Игра змейка (11/20)

Движение змейки очень простое: в соседней с головой ячейке создается новая голова, а последний элемент (хвост) змейки удаляется.

В классе Snake реализуй метод createNewHead(), который создает новый элемент GameObject и возвращает его. Новый
элемент GameObject должен создаваться рядом с элементом, в котором на данный момент находится голова змейки (элемент с индексом 0 из snakeParts).
Новый элемент GameObject создается с той стороны, куда движется змейка (поле direction).
Пример:
- если змейка движется влево, new GameObject(headX-1, headY);
- если змейка движется вниз, new GameObject(headX, headY + 1)
Здесь headX &mdash; координата головы змеи x, headY &mdash; координата головы змеи y.

Примечание: координаты могут быть отрицательные и/или быть за границами игрового поля. Пока что это нормально, в дальнейших частях задачи исправим.

В классе Snake создай метод removeTail() и реализуй его.



Игра змейка (11/20)

Каждый ход змейка должна перемещаться. Ход занимает определенный промежуток времени, который ты можешь задать.

Для определения логики передвижения змейки, в классе Snake создай
метод void move(). В классе SnakeGame переопредели родительский метод onTurn(int). Всё, что должно происходить в игре на протяжении одного хода,
описывается здесь. После передвижения змейки не забудь перерисовать игровое поле.

Для установки продолжительности хода, создай переменную turnDelay. Игра будет начинаться со скоростью 300мс/ход. Установи продолжительность хода
в момент создания игры.



Игра змейка (11/20)

Объект на игровом поле может иметь одно из двух состояний: он может быть или &quot;жив&quot; (isAlive=true), или нет (isAlive=false).
Например, если змейка ударяется о край игрового поля, она умирает. То же происходит с яблоком, когда его съедает змейка. Чтобы хранить состояние
объектов, создай в классах Apple и Snake переменную boolean isAlive. Измени отрисовку змейки таким образом, чтобы &quot;неживая&quot; змейка была красного цвета.

Змейка может двигаться в одном из четырех направлений. Чтобы указать направления, создай enum Direction со значениями UP, RIGHT, DOWN, LEFT,
а в классе Snake &mdash; поле direction, которое будет хранить текущее направление движения. Пусть изначально змейка двигается влево. Изменять
направление движения змейки будем методом setDirection(Direction). Создай его.



Игра змейка (11/20)

Когда у нас уже есть змейка, нужно её отрисовать. Для этого, по аналогии с классом Apple, в классе Snake создай константы HEAD_SIGN и BODY_SIGN,
которые будут хранить символы для отрисовки головы и тела змейки. Также создай метод draw(Game), который должен отрисовывать змейку
на игровом поле.

Управлять отрисовкой змейки будем из класса SnakeGame. Поэтому создай переменную Snake snake в классе SnakeGame: в ней будет храниться
текущее состояние змейки. В методе createGame() создай новую змейку в центре игрового поля и присвой её переменной snake. В методе drawScene()
вызови у змейки метод draw(Game), чтобы отобразить её на игровом поле.



