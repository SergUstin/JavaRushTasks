taskKey="com.javarush.task.task27.task2712.big17"\n\nРесторан(17)

Реализуем третий и четвертый пункт статистики - список активных и неактивных роликов.
Для этого проще использовать доступ к хранилищу рекламных роликов - класс AdvertisementStorage.
1. В пакете ad создай StatisticAdvertisementManager, который будет предоставлять информацию из AdvertisementStorage в нужном нам виде.
Сделай его синглтоном.

2. В классе StatisticAdvertisementManager создай и проинициализируй поле типа AdvertisementStorage.

3. В StatisticAdvertisementManager создай два(или один) метода (придумать самостоятельно), которые из хранилища
AdvertisementStorage достанут все необходимые данные - соответственно список активных и неактивных рекламных роликов.
Активным роликом считается тот, у которого есть минимум один доступный показ.
Неактивным роликом считается тот, у которого количество показов равно 0.

4. Реализуй логику методов printActiveVideoSet и printArchivedVideoSet в классе DirectorTablet.
Используй методы/метод, созданные в предыдущем пункте.
Сортировать по имени видео-ролика в алфавитном порядке без учета регистра.
Сначала английские, потом русские.

Пример вывода для printActiveVideoSet (имя ролика - оставшееся количество показов ролика):
First Video - 100
Second video - 10
Third Video - 2
четвертое видео - 4

Пример вывода для printArchivedVideoSet (имена роликов с количеством показов 0):
Second video
Third Video
четвертое видео


Требования:
1.	Класс StatisticAdvertisementManager должен быть синглтоном.
2.	Метод printActiveVideoSet в классе DirectorTablet должен быть реализован в соответствии с условием задачи.
3.	Метод printArchivedVideoSet в классе DirectorTablet должен быть реализован в соответствии с условием задачи.


Ресторан(17)

Реализуем первый пункт статистики - какую сумму заработали на рекламе, сгруппировать по дням.

1. В классе VideoSelectedEventDataRow создай геттер для поля amount.
В классе CookedOrderEventDataRow создай геттер для поля cookName.

2. В StatisticManager создай метод (придумать самостоятельно), который из хранилища достанет все данные,
относящиеся к отображению рекламы, и посчитает общую прибыль за каждый день.
Дополнительно добавь вспомогательный метод get в класс хранилища, чтобы получить доступ к данным.

3. Начнем с логики метода printAdvertisementProfit в классе DirectorTablet.
Используя метод из предыдущего пункта вывести в консоль в убывающем порядке даты и суммы.
Для каждой даты из хранилища событий, для которой есть показанная реклама, должна выводится сумма прибыли за показы рекламы для этой даты.
В конце вывести слово Total и общую сумму.
Пример:
14-Jul-2013 - 2.50
13-Jul-2013 - 1.02
12-Jul-2013 - 543.98
Total - 547.50

4.Реализуем второй пункт статистики - загрузка (рабочее время) повара, сгруппировать по дням.

В StatisticManager создай метод (придумать самостоятельно), который из хранилища достанет все данные,
относящиеся к работе повара, и посчитает общую продолжительность работы для каждого повара отдельно.

5. Реализуем логику метода printCookWorkloading в классе DirectorTablet.
Используя метод из предыдущего пункта вывести в консоль в убывающем порядке даты, имена поваров и время работы в минутах (округлить в большую сторону).
Для каждой даты из хранилища событий, для которой есть запись о работе повара, должна выводится продолжительность работы в минутах для этой даты.
Если повар не работал в какой-то из дней, то с пустыми данными его НЕ выводить (см. 13-Jul-2013)
Поваров сортировать по имени
Пример:
14-Jul-2013
Ivanov - 60 min
Petrov - 35 min

13-Jul-2013
Ivanov - 129 min

12-Jul-2013
Ivanov - 6 min
Petrov - 5 min

6. Обрати внимание, что при выводе даты, название месяца должно быть на английском (при форматировании можно передать параметр Locale.ENGLISH).



Ресторан(17)

Давай подумаем что нужно сделать, чтобы директор мог посмотреть:
1) какую сумму заработали на рекламе, сгруппировать по дням;
2) загрузка (рабочее время) повара, сгруппировать по дням;
3) список активных роликов и оставшееся количество показов по каждому;
4) список неактивных роликов (с оставшемся количеством показов равным нулю).

Для каждого пункта добавим соответствующий метод в StatisticManager.
Директор будет вызывать метод, StatisticManager будет делать различные подсчеты.
Но директор должен из какого-то места вызвать эти методы. Дадим ему планшет, но с другим ПО.
Для этого создадим класс DirectorTablet, в котором будут дружелюбный интерфейс и возможность обращения к статистике.

1. В корне задачи-проекта создай класс DirectorTablet.

2. В классе DirectorTablet создай четыре void метода:
printAdvertisementProfit(), printCookWorkloading(), printActiveVideoSet(), printArchivedVideoSet()
Они соответствуют перечисленным четырем пунктам.

3. Чтобы можно было проверить результат, добавим в метод main создание директорского планшета и вывод статистики
с помощью методов перечисленных выше.

Нам понадобятся еще некоторые методы.
4. В EventDataRow создай методы:
- Date getDate(), реализация которого вернет дату создания записи
- int getTime(), реализация которого вернет время или продолжительность

5. В StatisticManager void register(Cook cook), который зарегистрирует полученного повара.
Создай в классе StatisticManager множество (Set) поваров (cooks) и добавь в него повара.

6. Реализуй необходимые геттеры у классов CookedOrderEventDataRow, NoAvailableVideoEventDataRow и VideoSelectedEventDataRow.



Ресторан(17)

1. Внутри StatisticStorage создай метод void put(EventDataRow data).

2. Чтобы методом put(EventDataRow data) добавить объект data в данные карты, нужен тип события - EventType.
Будет правильно, если событие будет хранить в себе свой тип. Поэтому:
2.1. В интерфейс EventDataRow добавь метод EventType getType()
2.2. Реализуй этот метод в каждом классе-событии: CookedOrderEventDataRow, NoAvailableVideoEventDataRow, VideoSelectedEventDataRow

3. Сделай так, чтобы к методу void put(EventDataRow data) нельзя было получить доступ за пределами класса StatisticManager.
Воспользуйся особенностями вложенных классов.

Теперь остается расставить вызовы StatisticManager в те места, которые генерируют события.

4. Зарегистрируй событие для повара во время приготовления еды.
Добавь геттер для поля dishes в класс Order, используй его при создании события.

5. Зарегистрируй событие &quot;видео выбрано&quot; перед отображением рекламы пользователю.

6. Метод register с одним параметром типа EventDataRow должен регистрировать полученное событие в statisticStorage.



Ресторан(17)

Вернемся к методу register в классе StatisticManager. Он должен регистрировать события в хранилище.
Создадим хранилище :)
Хранилище связано 1 к 1 с менеджером, т.е. один менеджер и одно хранилище на приложение.
К хранилищу может доступиться только StatisticManager. Поэтому...
Из вышеперечисленного следует, что хранилище должно быть приватным иннер классом.
Назовем его StatisticStorage.

1. Внутри класса StatisticManager создать приватный иннер класс StatisticStorage.

2. Чтобы менеджер мог получить доступ к хранилищу, нужно в классе StatisticManager создать поле statisticStorage типа StatisticStorage.
Инициализируй его экземпляром класса.

3. StatisticStorage будет хранить данные внутри себя в виде мапы/словаря storage.
Связь StatisticStorage и Map должна быть has-a
Типы для мапы - &lt;EventType, List&lt;EventDataRow&gt;&gt;

4. В конструкторе StatisticStorage инициализируй хранилище данными по-умолчанию:
например используя цикл, для каждого EventType добавь new ArrayList&lt;EventDataRow&gt;()



Ресторан(17)

У нас выделяются несколько событий:
*повар приготовил заказ
*выбрали набор видео-роликов для заказа
*нет ни одного видео-ролика, который можно показать во время приготовления заказа

Это постоянные данные, поэтому для их хранения подходит энам.

1. В пакете event создай enum EventType {COOKED_ORDER, SELECTED_VIDEOS, NO_AVAILABLE_VIDEO}

2. В пакете event создай три класса, соответствующих значениям энама. Они будут(должны) представлять собой события.
Мы будем регистрировать их экземпляры в хранилище.
Имена классов с параметрами для конструкторов:
2.1. CookedOrderEventDataRow(String tabletName, String cookName, int cookingTimeSeconds, List&lt;Dish&gt; cookingDishes)
где - tabletName - имя планшета
cookName - имя повара
cookingTimeSeconds - время приготовления заказа в секундах
cookingDishes - список блюд для приготовления
2.2. NoAvailableVideoEventDataRow(int totalDuration)
totalDuration - время приготовления заказа в секундах
2.3. VideoSelectedEventDataRow(List&lt;Advertisement&gt; optimalVideoSet, long amount, int totalDuration)
optimalVideoSet - список видео-роликов, отобранных для показа
amount - сумма денег в копейках
totalDuration - общая продолжительность показа отобранных рекламных роликов
3. В классы, созданные в п.2., добавьте поле Date currentDate, которое проинициализируй в конструкторе текущей датой.



